const std = @import("std");

pub fn build(b: *std.Build) void {
    // Config
    const target = b.standardTargetOptions(.{});
    const optimize = b.standardOptimizeOption(.{});

    // Steps (use `zig build STEP_NAME` to run the specific step)
    const run_step = b.step("run", "Run the generator");
    const bindings_step = b.step("bindings", "Build godot bindings");
    const build_example_step = b.step("example", "Build zigodot example");
    // const run_example_step = b.step("run-example", "Run zigodot example");

    // Dependencies
    const overloading_dependency = b.dependency("overloading", .{
        .target = target,
        .optimize = optimize,
    });

    // generator executable compile step
    const generator_exe = b.addExecutable(.{
        .name = "zigodot_generator",
        .root_source_file = b.path("src/main.zig"),
        .target = target,
        .optimize = optimize,
    });
    b.installArtifact(generator_exe);

    { // User runs generator from zig build run
        const run_cmd = b.addRunArtifact(generator_exe);
        run_cmd.step.dependOn(b.getInstallStep());

        // This allows the user to pass arguments to the application in the build
        // command itself, like this: `zig build run -- arg1 arg2 etc`
        if (b.args) |args| {
            run_cmd.addArgs(args);
        }

        run_step.dependOn(&run_cmd.step);
    }

    // This run artifact will run the generator executable for use within the build system only
    const build_bindings_cmd = b.addRunArtifact(generator_exe);
    // Pass in args which will generate the bindings where we want them.
    build_bindings_cmd.addArgs(&.{ "src/api/extension_api.json", "src/gen/" });
    // Make bindings step build run the command that builds the bindings.
    bindings_step.dependOn(&build_bindings_cmd.step);

    // define root file of zigodot generated by bindings step
    // this being a generated file will make it so when the zigodot_module is requested
    // it will run the bindings_step to generate the root file
    const zigodot_generated_root = std.Build.GeneratedFile{
        .path = "src/gen/godot.zig",
        .step = bindings_step,
    };

    const zigodot_module = b.addModule("zigodot", .{
        .root_source_file = .{ .generated = .{ .file = &zigodot_generated_root } },
    });
    // zigodot uses function overloading, make sure to import that into the module
    zigodot_module.addImport("overloading", overloading_dependency.module("overloading"));

    // example gdextension
    const example_lib = b.addSharedLibrary(.{
        .name = "zigodot_example",
        .root_source_file = b.path("src/example/example_extension.zig"),
        .target = target,
        .optimize = optimize,
    });

    example_lib.root_module.addImport("godot", zigodot_module);
    b.installArtifact(example_lib);
    build_example_step.dependOn(&example_lib.step);

    // run example project
    // const example_exe = b.addSharedLibrary(.{
    //     .name = "zd_example",
    //     .root_source_file = b.path("src/example/example_extension.zig"),
    //     .target = target,
    //     .optimize = optimize,
    // });
    // b.installArtifact(example_exe);
    // example_exe.root_module.addImport("godot", zigodot_module);
    // run_example_step.dependOn(&example_exe.step);
}
