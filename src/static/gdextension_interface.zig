pub const __builtin_bswap16 = @import("std").zig.c_builtins.__builtin_bswap16;
pub const __builtin_bswap32 = @import("std").zig.c_builtins.__builtin_bswap32;
pub const __builtin_bswap64 = @import("std").zig.c_builtins.__builtin_bswap64;
pub const __builtin_signbit = @import("std").zig.c_builtins.__builtin_signbit;
pub const __builtin_signbitf = @import("std").zig.c_builtins.__builtin_signbitf;
pub const __builtin_popcount = @import("std").zig.c_builtins.__builtin_popcount;
pub const __builtin_ctz = @import("std").zig.c_builtins.__builtin_ctz;
pub const __builtin_clz = @import("std").zig.c_builtins.__builtin_clz;
pub const __builtin_sqrt = @import("std").zig.c_builtins.__builtin_sqrt;
pub const __builtin_sqrtf = @import("std").zig.c_builtins.__builtin_sqrtf;
pub const __builtin_sin = @import("std").zig.c_builtins.__builtin_sin;
pub const __builtin_sinf = @import("std").zig.c_builtins.__builtin_sinf;
pub const __builtin_cos = @import("std").zig.c_builtins.__builtin_cos;
pub const __builtin_cosf = @import("std").zig.c_builtins.__builtin_cosf;
pub const __builtin_exp = @import("std").zig.c_builtins.__builtin_exp;
pub const __builtin_expf = @import("std").zig.c_builtins.__builtin_expf;
pub const __builtin_exp2 = @import("std").zig.c_builtins.__builtin_exp2;
pub const __builtin_exp2f = @import("std").zig.c_builtins.__builtin_exp2f;
pub const __builtin_log = @import("std").zig.c_builtins.__builtin_log;
pub const __builtin_logf = @import("std").zig.c_builtins.__builtin_logf;
pub const __builtin_log2 = @import("std").zig.c_builtins.__builtin_log2;
pub const __builtin_log2f = @import("std").zig.c_builtins.__builtin_log2f;
pub const __builtin_log10 = @import("std").zig.c_builtins.__builtin_log10;
pub const __builtin_log10f = @import("std").zig.c_builtins.__builtin_log10f;
pub const __builtin_abs = @import("std").zig.c_builtins.__builtin_abs;
pub const __builtin_labs = @import("std").zig.c_builtins.__builtin_labs;
pub const __builtin_llabs = @import("std").zig.c_builtins.__builtin_llabs;
pub const __builtin_fabs = @import("std").zig.c_builtins.__builtin_fabs;
pub const __builtin_fabsf = @import("std").zig.c_builtins.__builtin_fabsf;
pub const __builtin_floor = @import("std").zig.c_builtins.__builtin_floor;
pub const __builtin_floorf = @import("std").zig.c_builtins.__builtin_floorf;
pub const __builtin_ceil = @import("std").zig.c_builtins.__builtin_ceil;
pub const __builtin_ceilf = @import("std").zig.c_builtins.__builtin_ceilf;
pub const __builtin_trunc = @import("std").zig.c_builtins.__builtin_trunc;
pub const __builtin_truncf = @import("std").zig.c_builtins.__builtin_truncf;
pub const __builtin_round = @import("std").zig.c_builtins.__builtin_round;
pub const __builtin_roundf = @import("std").zig.c_builtins.__builtin_roundf;
pub const __builtin_strlen = @import("std").zig.c_builtins.__builtin_strlen;
pub const __builtin_strcmp = @import("std").zig.c_builtins.__builtin_strcmp;
pub const __builtin_object_size = @import("std").zig.c_builtins.__builtin_object_size;
pub const __builtin___memset_chk = @import("std").zig.c_builtins.__builtin___memset_chk;
pub const __builtin_memset = @import("std").zig.c_builtins.__builtin_memset;
pub const __builtin___memcpy_chk = @import("std").zig.c_builtins.__builtin___memcpy_chk;
pub const __builtin_memcpy = @import("std").zig.c_builtins.__builtin_memcpy;
pub const __builtin_expect = @import("std").zig.c_builtins.__builtin_expect;
pub const __builtin_nanf = @import("std").zig.c_builtins.__builtin_nanf;
pub const __builtin_huge_valf = @import("std").zig.c_builtins.__builtin_huge_valf;
pub const __builtin_inff = @import("std").zig.c_builtins.__builtin_inff;
pub const __builtin_isnan = @import("std").zig.c_builtins.__builtin_isnan;
pub const __builtin_isinf = @import("std").zig.c_builtins.__builtin_isinf;
pub const __builtin_isinf_sign = @import("std").zig.c_builtins.__builtin_isinf_sign;
pub const __has_builtin = @import("std").zig.c_builtins.__has_builtin;
pub const __builtin_assume = @import("std").zig.c_builtins.__builtin_assume;
pub const __builtin_unreachable = @import("std").zig.c_builtins.__builtin_unreachable;
pub const __builtin_constant_p = @import("std").zig.c_builtins.__builtin_constant_p;
pub const __builtin_mul_overflow = @import("std").zig.c_builtins.__builtin_mul_overflow;
pub const ptrdiff_t = c_long;
pub const wchar_t = c_int;
pub const max_align_t = extern struct {
    __clang_max_align_nonce1: c_longlong align(8) = @import("std").mem.zeroes(c_longlong),
    __clang_max_align_nonce2: c_longdouble align(16) = @import("std").mem.zeroes(c_longdouble),
};
pub const int_least64_t = i64;
pub const uint_least64_t = u64;
pub const int_fast64_t = i64;
pub const uint_fast64_t = u64;
pub const int_least32_t = i32;
pub const uint_least32_t = u32;
pub const int_fast32_t = i32;
pub const uint_fast32_t = u32;
pub const int_least16_t = i16;
pub const uint_least16_t = u16;
pub const int_fast16_t = i16;
pub const uint_fast16_t = u16;
pub const int_least8_t = i8;
pub const uint_least8_t = u8;
pub const int_fast8_t = i8;
pub const uint_fast8_t = u8;
pub const intmax_t = c_long;
pub const uintmax_t = c_ulong;
pub const char32_t = u32;
pub const char16_t = u16;
pub const GDEXTENSION_VARIANT_TYPE_NIL: c_int = 0;
pub const GDEXTENSION_VARIANT_TYPE_BOOL: c_int = 1;
pub const GDEXTENSION_VARIANT_TYPE_INT: c_int = 2;
pub const GDEXTENSION_VARIANT_TYPE_FLOAT: c_int = 3;
pub const GDEXTENSION_VARIANT_TYPE_STRING: c_int = 4;
pub const GDEXTENSION_VARIANT_TYPE_VECTOR2: c_int = 5;
pub const GDEXTENSION_VARIANT_TYPE_VECTOR2I: c_int = 6;
pub const GDEXTENSION_VARIANT_TYPE_RECT2: c_int = 7;
pub const GDEXTENSION_VARIANT_TYPE_RECT2I: c_int = 8;
pub const GDEXTENSION_VARIANT_TYPE_VECTOR3: c_int = 9;
pub const GDEXTENSION_VARIANT_TYPE_VECTOR3I: c_int = 10;
pub const GDEXTENSION_VARIANT_TYPE_TRANSFORM2D: c_int = 11;
pub const GDEXTENSION_VARIANT_TYPE_VECTOR4: c_int = 12;
pub const GDEXTENSION_VARIANT_TYPE_VECTOR4I: c_int = 13;
pub const GDEXTENSION_VARIANT_TYPE_PLANE: c_int = 14;
pub const GDEXTENSION_VARIANT_TYPE_QUATERNION: c_int = 15;
pub const GDEXTENSION_VARIANT_TYPE_AABB: c_int = 16;
pub const GDEXTENSION_VARIANT_TYPE_BASIS: c_int = 17;
pub const GDEXTENSION_VARIANT_TYPE_TRANSFORM3D: c_int = 18;
pub const GDEXTENSION_VARIANT_TYPE_PROJECTION: c_int = 19;
pub const GDEXTENSION_VARIANT_TYPE_COLOR: c_int = 20;
pub const GDEXTENSION_VARIANT_TYPE_STRING_NAME: c_int = 21;
pub const GDEXTENSION_VARIANT_TYPE_NODE_PATH: c_int = 22;
pub const GDEXTENSION_VARIANT_TYPE_RID: c_int = 23;
pub const GDEXTENSION_VARIANT_TYPE_OBJECT: c_int = 24;
pub const GDEXTENSION_VARIANT_TYPE_CALLABLE: c_int = 25;
pub const GDEXTENSION_VARIANT_TYPE_SIGNAL: c_int = 26;
pub const GDEXTENSION_VARIANT_TYPE_DICTIONARY: c_int = 27;
pub const GDEXTENSION_VARIANT_TYPE_ARRAY: c_int = 28;
pub const GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY: c_int = 29;
pub const GDEXTENSION_VARIANT_TYPE_PACKED_INT32_ARRAY: c_int = 30;
pub const GDEXTENSION_VARIANT_TYPE_PACKED_INT64_ARRAY: c_int = 31;
pub const GDEXTENSION_VARIANT_TYPE_PACKED_FLOAT32_ARRAY: c_int = 32;
pub const GDEXTENSION_VARIANT_TYPE_PACKED_FLOAT64_ARRAY: c_int = 33;
pub const GDEXTENSION_VARIANT_TYPE_PACKED_STRING_ARRAY: c_int = 34;
pub const GDEXTENSION_VARIANT_TYPE_PACKED_VECTOR2_ARRAY: c_int = 35;
pub const GDEXTENSION_VARIANT_TYPE_PACKED_VECTOR3_ARRAY: c_int = 36;
pub const GDEXTENSION_VARIANT_TYPE_PACKED_COLOR_ARRAY: c_int = 37;
pub const GDEXTENSION_VARIANT_TYPE_PACKED_VECTOR4_ARRAY: c_int = 38;
pub const GDEXTENSION_VARIANT_TYPE_VARIANT_MAX: c_int = 39;
pub const GDExtensionVariantType = c_uint;
pub const GDEXTENSION_VARIANT_OP_EQUAL: c_int = 0;
pub const GDEXTENSION_VARIANT_OP_NOT_EQUAL: c_int = 1;
pub const GDEXTENSION_VARIANT_OP_LESS: c_int = 2;
pub const GDEXTENSION_VARIANT_OP_LESS_EQUAL: c_int = 3;
pub const GDEXTENSION_VARIANT_OP_GREATER: c_int = 4;
pub const GDEXTENSION_VARIANT_OP_GREATER_EQUAL: c_int = 5;
pub const GDEXTENSION_VARIANT_OP_ADD: c_int = 6;
pub const GDEXTENSION_VARIANT_OP_SUBTRACT: c_int = 7;
pub const GDEXTENSION_VARIANT_OP_MULTIPLY: c_int = 8;
pub const GDEXTENSION_VARIANT_OP_DIVIDE: c_int = 9;
pub const GDEXTENSION_VARIANT_OP_NEGATE: c_int = 10;
pub const GDEXTENSION_VARIANT_OP_POSITIVE: c_int = 11;
pub const GDEXTENSION_VARIANT_OP_MODULE: c_int = 12;
pub const GDEXTENSION_VARIANT_OP_POWER: c_int = 13;
pub const GDEXTENSION_VARIANT_OP_SHIFT_LEFT: c_int = 14;
pub const GDEXTENSION_VARIANT_OP_SHIFT_RIGHT: c_int = 15;
pub const GDEXTENSION_VARIANT_OP_BIT_AND: c_int = 16;
pub const GDEXTENSION_VARIANT_OP_BIT_OR: c_int = 17;
pub const GDEXTENSION_VARIANT_OP_BIT_XOR: c_int = 18;
pub const GDEXTENSION_VARIANT_OP_BIT_NEGATE: c_int = 19;
pub const GDEXTENSION_VARIANT_OP_AND: c_int = 20;
pub const GDEXTENSION_VARIANT_OP_OR: c_int = 21;
pub const GDEXTENSION_VARIANT_OP_XOR: c_int = 22;
pub const GDEXTENSION_VARIANT_OP_NOT: c_int = 23;
pub const GDEXTENSION_VARIANT_OP_IN: c_int = 24;
pub const GDEXTENSION_VARIANT_OP_MAX: c_int = 25;
pub const GDExtensionVariantOperator = c_uint;
pub const GDExtensionVariantPtr = ?*anyopaque;
pub const GDExtensionConstVariantPtr = ?*const anyopaque;
pub const GDExtensionUninitializedVariantPtr = ?*anyopaque;
pub const GDExtensionStringNamePtr = ?*anyopaque;
pub const GDExtensionConstStringNamePtr = ?*const anyopaque;
pub const GDExtensionUninitializedStringNamePtr = ?*anyopaque;
pub const GDExtensionStringPtr = ?*anyopaque;
pub const GDExtensionConstStringPtr = ?*const anyopaque;
pub const GDExtensionUninitializedStringPtr = ?*anyopaque;
pub const GDExtensionObjectPtr = ?*anyopaque;
pub const GDExtensionConstObjectPtr = ?*const anyopaque;
pub const GDExtensionUninitializedObjectPtr = ?*anyopaque;
pub const GDExtensionTypePtr = ?*anyopaque;
pub const GDExtensionConstTypePtr = ?*const anyopaque;
pub const GDExtensionUninitializedTypePtr = ?*anyopaque;
pub const GDExtensionMethodBindPtr = ?*const anyopaque;
pub const GDExtensionInt = i64;
pub const GDExtensionBool = u8;
pub const GDObjectInstanceID = u64;
pub const GDExtensionRefPtr = ?*anyopaque;
pub const GDExtensionConstRefPtr = ?*const anyopaque;
pub const GDEXTENSION_CALL_OK: c_int = 0;
pub const GDEXTENSION_CALL_ERROR_INVALID_METHOD: c_int = 1;
pub const GDEXTENSION_CALL_ERROR_INVALID_ARGUMENT: c_int = 2;
pub const GDEXTENSION_CALL_ERROR_TOO_MANY_ARGUMENTS: c_int = 3;
pub const GDEXTENSION_CALL_ERROR_TOO_FEW_ARGUMENTS: c_int = 4;
pub const GDEXTENSION_CALL_ERROR_INSTANCE_IS_NULL: c_int = 5;
pub const GDEXTENSION_CALL_ERROR_METHOD_NOT_CONST: c_int = 6;
pub const GDExtensionCallErrorType = c_uint;
pub const GDExtensionCallError = extern struct {
    @"error": GDExtensionCallErrorType = @import("std").mem.zeroes(GDExtensionCallErrorType),
    argument: i32 = @import("std").mem.zeroes(i32),
    expected: i32 = @import("std").mem.zeroes(i32),
};
pub const GDExtensionVariantFromTypeConstructorFunc = ?*const fn (GDExtensionUninitializedVariantPtr, GDExtensionTypePtr) callconv(.C) void;
pub const GDExtensionTypeFromVariantConstructorFunc = ?*const fn (GDExtensionUninitializedTypePtr, GDExtensionVariantPtr) callconv(.C) void;
pub const GDExtensionPtrOperatorEvaluator = ?*const fn (GDExtensionConstTypePtr, GDExtensionConstTypePtr, GDExtensionTypePtr) callconv(.C) void;
pub const GDExtensionPtrBuiltInMethod = ?*const fn (GDExtensionTypePtr, [*c]const GDExtensionConstTypePtr, GDExtensionTypePtr, c_int) callconv(.C) void;
pub const GDExtensionPtrConstructor = ?*const fn (GDExtensionUninitializedTypePtr, [*c]const GDExtensionConstTypePtr) callconv(.C) void;
pub const GDExtensionPtrDestructor = ?*const fn (GDExtensionTypePtr) callconv(.C) void;
pub const GDExtensionPtrSetter = ?*const fn (GDExtensionTypePtr, GDExtensionConstTypePtr) callconv(.C) void;
pub const GDExtensionPtrGetter = ?*const fn (GDExtensionConstTypePtr, GDExtensionTypePtr) callconv(.C) void;
pub const GDExtensionPtrIndexedSetter = ?*const fn (GDExtensionTypePtr, GDExtensionInt, GDExtensionConstTypePtr) callconv(.C) void;
pub const GDExtensionPtrIndexedGetter = ?*const fn (GDExtensionConstTypePtr, GDExtensionInt, GDExtensionTypePtr) callconv(.C) void;
pub const GDExtensionPtrKeyedSetter = ?*const fn (GDExtensionTypePtr, GDExtensionConstTypePtr, GDExtensionConstTypePtr) callconv(.C) void;
pub const GDExtensionPtrKeyedGetter = ?*const fn (GDExtensionConstTypePtr, GDExtensionConstTypePtr, GDExtensionTypePtr) callconv(.C) void;
pub const GDExtensionPtrKeyedChecker = ?*const fn (GDExtensionConstVariantPtr, GDExtensionConstVariantPtr) callconv(.C) u32;
pub const GDExtensionPtrUtilityFunction = ?*const fn (GDExtensionTypePtr, [*c]const GDExtensionConstTypePtr, c_int) callconv(.C) void;
pub const GDExtensionClassConstructor = ?*const fn (...) callconv(.C) GDExtensionObjectPtr;
pub const GDExtensionInstanceBindingCreateCallback = ?*const fn (?*anyopaque, ?*anyopaque) callconv(.C) ?*anyopaque;
pub const GDExtensionInstanceBindingFreeCallback = ?*const fn (?*anyopaque, ?*anyopaque, ?*anyopaque) callconv(.C) void;
pub const GDExtensionInstanceBindingReferenceCallback = ?*const fn (?*anyopaque, ?*anyopaque, GDExtensionBool) callconv(.C) GDExtensionBool;
pub const GDExtensionInstanceBindingCallbacks = extern struct {
    create_callback: GDExtensionInstanceBindingCreateCallback = @import("std").mem.zeroes(GDExtensionInstanceBindingCreateCallback),
    free_callback: GDExtensionInstanceBindingFreeCallback = @import("std").mem.zeroes(GDExtensionInstanceBindingFreeCallback),
    reference_callback: GDExtensionInstanceBindingReferenceCallback = @import("std").mem.zeroes(GDExtensionInstanceBindingReferenceCallback),
};
pub const GDExtensionClassInstancePtr = ?*anyopaque;
pub const GDExtensionClassSet = ?*const fn (GDExtensionClassInstancePtr, GDExtensionConstStringNamePtr, GDExtensionConstVariantPtr) callconv(.C) GDExtensionBool;
pub const GDExtensionClassGet = ?*const fn (GDExtensionClassInstancePtr, GDExtensionConstStringNamePtr, GDExtensionVariantPtr) callconv(.C) GDExtensionBool;
pub const GDExtensionClassGetRID = ?*const fn (GDExtensionClassInstancePtr) callconv(.C) u64;
pub const GDExtensionPropertyInfo = extern struct {
    type: GDExtensionVariantType = @import("std").mem.zeroes(GDExtensionVariantType),
    name: GDExtensionStringNamePtr = @import("std").mem.zeroes(GDExtensionStringNamePtr),
    class_name: GDExtensionStringNamePtr = @import("std").mem.zeroes(GDExtensionStringNamePtr),
    hint: u32 = @import("std").mem.zeroes(u32),
    hint_string: GDExtensionStringPtr = @import("std").mem.zeroes(GDExtensionStringPtr),
    usage: u32 = @import("std").mem.zeroes(u32),
};
pub const GDExtensionMethodInfo = extern struct {
    name: GDExtensionStringNamePtr = @import("std").mem.zeroes(GDExtensionStringNamePtr),
    return_value: GDExtensionPropertyInfo = @import("std").mem.zeroes(GDExtensionPropertyInfo),
    flags: u32 = @import("std").mem.zeroes(u32),
    id: i32 = @import("std").mem.zeroes(i32),
    argument_count: u32 = @import("std").mem.zeroes(u32),
    arguments: [*c]GDExtensionPropertyInfo = @import("std").mem.zeroes([*c]GDExtensionPropertyInfo),
    default_argument_count: u32 = @import("std").mem.zeroes(u32),
    default_arguments: [*c]GDExtensionVariantPtr = @import("std").mem.zeroes([*c]GDExtensionVariantPtr),
};
pub const GDExtensionClassGetPropertyList = ?*const fn (GDExtensionClassInstancePtr, [*c]u32) callconv(.C) [*c]const GDExtensionPropertyInfo;
pub const GDExtensionClassFreePropertyList = ?*const fn (GDExtensionClassInstancePtr, [*c]const GDExtensionPropertyInfo) callconv(.C) void;
pub const GDExtensionClassFreePropertyList2 = ?*const fn (GDExtensionClassInstancePtr, [*c]const GDExtensionPropertyInfo, u32) callconv(.C) void;
pub const GDExtensionClassPropertyCanRevert = ?*const fn (GDExtensionClassInstancePtr, GDExtensionConstStringNamePtr) callconv(.C) GDExtensionBool;
pub const GDExtensionClassPropertyGetRevert = ?*const fn (GDExtensionClassInstancePtr, GDExtensionConstStringNamePtr, GDExtensionVariantPtr) callconv(.C) GDExtensionBool;
pub const GDExtensionClassValidateProperty = ?*const fn (GDExtensionClassInstancePtr, [*c]GDExtensionPropertyInfo) callconv(.C) GDExtensionBool;
pub const GDExtensionClassNotification = ?*const fn (GDExtensionClassInstancePtr, i32) callconv(.C) void;
pub const GDExtensionClassNotification2 = ?*const fn (GDExtensionClassInstancePtr, i32, GDExtensionBool) callconv(.C) void;
pub const GDExtensionClassToString = ?*const fn (GDExtensionClassInstancePtr, [*c]GDExtensionBool, GDExtensionStringPtr) callconv(.C) void;
pub const GDExtensionClassReference = ?*const fn (GDExtensionClassInstancePtr) callconv(.C) void;
pub const GDExtensionClassUnreference = ?*const fn (GDExtensionClassInstancePtr) callconv(.C) void;
pub const GDExtensionClassCallVirtual = ?*const fn (GDExtensionClassInstancePtr, [*c]const GDExtensionConstTypePtr, GDExtensionTypePtr) callconv(.C) void;
pub const GDExtensionClassCreateInstance = ?*const fn (?*anyopaque) callconv(.C) GDExtensionObjectPtr;
pub const GDExtensionClassFreeInstance = ?*const fn (?*anyopaque, GDExtensionClassInstancePtr) callconv(.C) void;
pub const GDExtensionClassRecreateInstance = ?*const fn (?*anyopaque, GDExtensionObjectPtr) callconv(.C) GDExtensionClassInstancePtr;
pub const GDExtensionClassGetVirtual = ?*const fn (?*anyopaque, GDExtensionConstStringNamePtr) callconv(.C) GDExtensionClassCallVirtual;
pub const GDExtensionClassGetVirtualCallData = ?*const fn (?*anyopaque, GDExtensionConstStringNamePtr) callconv(.C) ?*anyopaque;
pub const GDExtensionClassCallVirtualWithData = ?*const fn (GDExtensionClassInstancePtr, GDExtensionConstStringNamePtr, ?*anyopaque, [*c]const GDExtensionConstTypePtr, GDExtensionTypePtr) callconv(.C) void;
pub const GDExtensionClassCreationInfo = extern struct {
    is_virtual: GDExtensionBool = @import("std").mem.zeroes(GDExtensionBool),
    is_abstract: GDExtensionBool = @import("std").mem.zeroes(GDExtensionBool),
    set_func: GDExtensionClassSet = @import("std").mem.zeroes(GDExtensionClassSet),
    get_func: GDExtensionClassGet = @import("std").mem.zeroes(GDExtensionClassGet),
    get_property_list_func: GDExtensionClassGetPropertyList = @import("std").mem.zeroes(GDExtensionClassGetPropertyList),
    free_property_list_func: GDExtensionClassFreePropertyList = @import("std").mem.zeroes(GDExtensionClassFreePropertyList),
    property_can_revert_func: GDExtensionClassPropertyCanRevert = @import("std").mem.zeroes(GDExtensionClassPropertyCanRevert),
    property_get_revert_func: GDExtensionClassPropertyGetRevert = @import("std").mem.zeroes(GDExtensionClassPropertyGetRevert),
    notification_func: GDExtensionClassNotification = @import("std").mem.zeroes(GDExtensionClassNotification),
    to_string_func: GDExtensionClassToString = @import("std").mem.zeroes(GDExtensionClassToString),
    reference_func: GDExtensionClassReference = @import("std").mem.zeroes(GDExtensionClassReference),
    unreference_func: GDExtensionClassUnreference = @import("std").mem.zeroes(GDExtensionClassUnreference),
    create_instance_func: GDExtensionClassCreateInstance = @import("std").mem.zeroes(GDExtensionClassCreateInstance),
    free_instance_func: GDExtensionClassFreeInstance = @import("std").mem.zeroes(GDExtensionClassFreeInstance),
    get_virtual_func: GDExtensionClassGetVirtual = @import("std").mem.zeroes(GDExtensionClassGetVirtual),
    get_rid_func: GDExtensionClassGetRID = @import("std").mem.zeroes(GDExtensionClassGetRID),
    class_userdata: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
};
pub const GDExtensionClassCreationInfo2 = extern struct {
    is_virtual: GDExtensionBool = @import("std").mem.zeroes(GDExtensionBool),
    is_abstract: GDExtensionBool = @import("std").mem.zeroes(GDExtensionBool),
    is_exposed: GDExtensionBool = @import("std").mem.zeroes(GDExtensionBool),
    set_func: GDExtensionClassSet = @import("std").mem.zeroes(GDExtensionClassSet),
    get_func: GDExtensionClassGet = @import("std").mem.zeroes(GDExtensionClassGet),
    get_property_list_func: GDExtensionClassGetPropertyList = @import("std").mem.zeroes(GDExtensionClassGetPropertyList),
    free_property_list_func: GDExtensionClassFreePropertyList = @import("std").mem.zeroes(GDExtensionClassFreePropertyList),
    property_can_revert_func: GDExtensionClassPropertyCanRevert = @import("std").mem.zeroes(GDExtensionClassPropertyCanRevert),
    property_get_revert_func: GDExtensionClassPropertyGetRevert = @import("std").mem.zeroes(GDExtensionClassPropertyGetRevert),
    validate_property_func: GDExtensionClassValidateProperty = @import("std").mem.zeroes(GDExtensionClassValidateProperty),
    notification_func: GDExtensionClassNotification2 = @import("std").mem.zeroes(GDExtensionClassNotification2),
    to_string_func: GDExtensionClassToString = @import("std").mem.zeroes(GDExtensionClassToString),
    reference_func: GDExtensionClassReference = @import("std").mem.zeroes(GDExtensionClassReference),
    unreference_func: GDExtensionClassUnreference = @import("std").mem.zeroes(GDExtensionClassUnreference),
    create_instance_func: GDExtensionClassCreateInstance = @import("std").mem.zeroes(GDExtensionClassCreateInstance),
    free_instance_func: GDExtensionClassFreeInstance = @import("std").mem.zeroes(GDExtensionClassFreeInstance),
    recreate_instance_func: GDExtensionClassRecreateInstance = @import("std").mem.zeroes(GDExtensionClassRecreateInstance),
    get_virtual_func: GDExtensionClassGetVirtual = @import("std").mem.zeroes(GDExtensionClassGetVirtual),
    get_virtual_call_data_func: GDExtensionClassGetVirtualCallData = @import("std").mem.zeroes(GDExtensionClassGetVirtualCallData),
    call_virtual_with_data_func: GDExtensionClassCallVirtualWithData = @import("std").mem.zeroes(GDExtensionClassCallVirtualWithData),
    get_rid_func: GDExtensionClassGetRID = @import("std").mem.zeroes(GDExtensionClassGetRID),
    class_userdata: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
};
pub const GDExtensionClassCreationInfo3 = extern struct {
    is_virtual: GDExtensionBool = @import("std").mem.zeroes(GDExtensionBool),
    is_abstract: GDExtensionBool = @import("std").mem.zeroes(GDExtensionBool),
    is_exposed: GDExtensionBool = @import("std").mem.zeroes(GDExtensionBool),
    is_runtime: GDExtensionBool = @import("std").mem.zeroes(GDExtensionBool),
    set_func: GDExtensionClassSet = @import("std").mem.zeroes(GDExtensionClassSet),
    get_func: GDExtensionClassGet = @import("std").mem.zeroes(GDExtensionClassGet),
    get_property_list_func: GDExtensionClassGetPropertyList = @import("std").mem.zeroes(GDExtensionClassGetPropertyList),
    free_property_list_func: GDExtensionClassFreePropertyList2 = @import("std").mem.zeroes(GDExtensionClassFreePropertyList2),
    property_can_revert_func: GDExtensionClassPropertyCanRevert = @import("std").mem.zeroes(GDExtensionClassPropertyCanRevert),
    property_get_revert_func: GDExtensionClassPropertyGetRevert = @import("std").mem.zeroes(GDExtensionClassPropertyGetRevert),
    validate_property_func: GDExtensionClassValidateProperty = @import("std").mem.zeroes(GDExtensionClassValidateProperty),
    notification_func: GDExtensionClassNotification2 = @import("std").mem.zeroes(GDExtensionClassNotification2),
    to_string_func: GDExtensionClassToString = @import("std").mem.zeroes(GDExtensionClassToString),
    reference_func: GDExtensionClassReference = @import("std").mem.zeroes(GDExtensionClassReference),
    unreference_func: GDExtensionClassUnreference = @import("std").mem.zeroes(GDExtensionClassUnreference),
    create_instance_func: GDExtensionClassCreateInstance = @import("std").mem.zeroes(GDExtensionClassCreateInstance),
    free_instance_func: GDExtensionClassFreeInstance = @import("std").mem.zeroes(GDExtensionClassFreeInstance),
    recreate_instance_func: GDExtensionClassRecreateInstance = @import("std").mem.zeroes(GDExtensionClassRecreateInstance),
    get_virtual_func: GDExtensionClassGetVirtual = @import("std").mem.zeroes(GDExtensionClassGetVirtual),
    get_virtual_call_data_func: GDExtensionClassGetVirtualCallData = @import("std").mem.zeroes(GDExtensionClassGetVirtualCallData),
    call_virtual_with_data_func: GDExtensionClassCallVirtualWithData = @import("std").mem.zeroes(GDExtensionClassCallVirtualWithData),
    get_rid_func: GDExtensionClassGetRID = @import("std").mem.zeroes(GDExtensionClassGetRID),
    class_userdata: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
};
pub const GDExtensionClassLibraryPtr = ?*anyopaque;
pub const GDEXTENSION_METHOD_FLAG_NORMAL: c_int = 1;
pub const GDEXTENSION_METHOD_FLAG_EDITOR: c_int = 2;
pub const GDEXTENSION_METHOD_FLAG_CONST: c_int = 4;
pub const GDEXTENSION_METHOD_FLAG_VIRTUAL: c_int = 8;
pub const GDEXTENSION_METHOD_FLAG_VARARG: c_int = 16;
pub const GDEXTENSION_METHOD_FLAG_STATIC: c_int = 32;
pub const GDEXTENSION_METHOD_FLAGS_DEFAULT: c_int = 1;
pub const GDExtensionClassMethodFlags = c_uint;
pub const GDEXTENSION_METHOD_ARGUMENT_METADATA_NONE: c_int = 0;
pub const GDEXTENSION_METHOD_ARGUMENT_METADATA_INT_IS_INT8: c_int = 1;
pub const GDEXTENSION_METHOD_ARGUMENT_METADATA_INT_IS_INT16: c_int = 2;
pub const GDEXTENSION_METHOD_ARGUMENT_METADATA_INT_IS_INT32: c_int = 3;
pub const GDEXTENSION_METHOD_ARGUMENT_METADATA_INT_IS_INT64: c_int = 4;
pub const GDEXTENSION_METHOD_ARGUMENT_METADATA_INT_IS_UINT8: c_int = 5;
pub const GDEXTENSION_METHOD_ARGUMENT_METADATA_INT_IS_UINT16: c_int = 6;
pub const GDEXTENSION_METHOD_ARGUMENT_METADATA_INT_IS_UINT32: c_int = 7;
pub const GDEXTENSION_METHOD_ARGUMENT_METADATA_INT_IS_UINT64: c_int = 8;
pub const GDEXTENSION_METHOD_ARGUMENT_METADATA_REAL_IS_FLOAT: c_int = 9;
pub const GDEXTENSION_METHOD_ARGUMENT_METADATA_REAL_IS_DOUBLE: c_int = 10;
pub const GDExtensionClassMethodArgumentMetadata = c_uint;
pub const GDExtensionClassMethodCall = ?*const fn (?*anyopaque, GDExtensionClassInstancePtr, [*c]const GDExtensionConstVariantPtr, GDExtensionInt, GDExtensionVariantPtr, [*c]GDExtensionCallError) callconv(.C) void;
pub const GDExtensionClassMethodValidatedCall = ?*const fn (?*anyopaque, GDExtensionClassInstancePtr, [*c]const GDExtensionConstVariantPtr, GDExtensionVariantPtr) callconv(.C) void;
pub const GDExtensionClassMethodPtrCall = ?*const fn (?*anyopaque, GDExtensionClassInstancePtr, [*c]const GDExtensionConstTypePtr, GDExtensionTypePtr) callconv(.C) void;
pub const GDExtensionClassMethodInfo = extern struct {
    name: GDExtensionStringNamePtr = @import("std").mem.zeroes(GDExtensionStringNamePtr),
    method_userdata: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    call_func: GDExtensionClassMethodCall = @import("std").mem.zeroes(GDExtensionClassMethodCall),
    ptrcall_func: GDExtensionClassMethodPtrCall = @import("std").mem.zeroes(GDExtensionClassMethodPtrCall),
    method_flags: u32 = @import("std").mem.zeroes(u32),
    has_return_value: GDExtensionBool = @import("std").mem.zeroes(GDExtensionBool),
    return_value_info: [*c]GDExtensionPropertyInfo = @import("std").mem.zeroes([*c]GDExtensionPropertyInfo),
    return_value_metadata: GDExtensionClassMethodArgumentMetadata = @import("std").mem.zeroes(GDExtensionClassMethodArgumentMetadata),
    argument_count: u32 = @import("std").mem.zeroes(u32),
    arguments_info: [*c]GDExtensionPropertyInfo = @import("std").mem.zeroes([*c]GDExtensionPropertyInfo),
    arguments_metadata: [*c]GDExtensionClassMethodArgumentMetadata = @import("std").mem.zeroes([*c]GDExtensionClassMethodArgumentMetadata),
    default_argument_count: u32 = @import("std").mem.zeroes(u32),
    default_arguments: [*c]GDExtensionVariantPtr = @import("std").mem.zeroes([*c]GDExtensionVariantPtr),
};
pub const GDExtensionClassVirtualMethodInfo = extern struct {
    name: GDExtensionStringNamePtr = @import("std").mem.zeroes(GDExtensionStringNamePtr),
    method_flags: u32 = @import("std").mem.zeroes(u32),
    return_value: GDExtensionPropertyInfo = @import("std").mem.zeroes(GDExtensionPropertyInfo),
    return_value_metadata: GDExtensionClassMethodArgumentMetadata = @import("std").mem.zeroes(GDExtensionClassMethodArgumentMetadata),
    argument_count: u32 = @import("std").mem.zeroes(u32),
    arguments: [*c]GDExtensionPropertyInfo = @import("std").mem.zeroes([*c]GDExtensionPropertyInfo),
    arguments_metadata: [*c]GDExtensionClassMethodArgumentMetadata = @import("std").mem.zeroes([*c]GDExtensionClassMethodArgumentMetadata),
};
pub const GDExtensionCallableCustomCall = ?*const fn (?*anyopaque, [*c]const GDExtensionConstVariantPtr, GDExtensionInt, GDExtensionVariantPtr, [*c]GDExtensionCallError) callconv(.C) void;
pub const GDExtensionCallableCustomIsValid = ?*const fn (?*anyopaque) callconv(.C) GDExtensionBool;
pub const GDExtensionCallableCustomFree = ?*const fn (?*anyopaque) callconv(.C) void;
pub const GDExtensionCallableCustomHash = ?*const fn (?*anyopaque) callconv(.C) u32;
pub const GDExtensionCallableCustomEqual = ?*const fn (?*anyopaque, ?*anyopaque) callconv(.C) GDExtensionBool;
pub const GDExtensionCallableCustomLessThan = ?*const fn (?*anyopaque, ?*anyopaque) callconv(.C) GDExtensionBool;
pub const GDExtensionCallableCustomToString = ?*const fn (?*anyopaque, [*c]GDExtensionBool, GDExtensionStringPtr) callconv(.C) void;
pub const GDExtensionCallableCustomGetArgumentCount = ?*const fn (?*anyopaque, [*c]GDExtensionBool) callconv(.C) GDExtensionInt;
pub const GDExtensionCallableCustomInfo = extern struct {
    callable_userdata: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    token: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    object_id: GDObjectInstanceID = @import("std").mem.zeroes(GDObjectInstanceID),
    call_func: GDExtensionCallableCustomCall = @import("std").mem.zeroes(GDExtensionCallableCustomCall),
    is_valid_func: GDExtensionCallableCustomIsValid = @import("std").mem.zeroes(GDExtensionCallableCustomIsValid),
    free_func: GDExtensionCallableCustomFree = @import("std").mem.zeroes(GDExtensionCallableCustomFree),
    hash_func: GDExtensionCallableCustomHash = @import("std").mem.zeroes(GDExtensionCallableCustomHash),
    equal_func: GDExtensionCallableCustomEqual = @import("std").mem.zeroes(GDExtensionCallableCustomEqual),
    less_than_func: GDExtensionCallableCustomLessThan = @import("std").mem.zeroes(GDExtensionCallableCustomLessThan),
    to_string_func: GDExtensionCallableCustomToString = @import("std").mem.zeroes(GDExtensionCallableCustomToString),
};
pub const GDExtensionCallableCustomInfo2 = extern struct {
    callable_userdata: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    token: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    object_id: GDObjectInstanceID = @import("std").mem.zeroes(GDObjectInstanceID),
    call_func: GDExtensionCallableCustomCall = @import("std").mem.zeroes(GDExtensionCallableCustomCall),
    is_valid_func: GDExtensionCallableCustomIsValid = @import("std").mem.zeroes(GDExtensionCallableCustomIsValid),
    free_func: GDExtensionCallableCustomFree = @import("std").mem.zeroes(GDExtensionCallableCustomFree),
    hash_func: GDExtensionCallableCustomHash = @import("std").mem.zeroes(GDExtensionCallableCustomHash),
    equal_func: GDExtensionCallableCustomEqual = @import("std").mem.zeroes(GDExtensionCallableCustomEqual),
    less_than_func: GDExtensionCallableCustomLessThan = @import("std").mem.zeroes(GDExtensionCallableCustomLessThan),
    to_string_func: GDExtensionCallableCustomToString = @import("std").mem.zeroes(GDExtensionCallableCustomToString),
    get_argument_count_func: GDExtensionCallableCustomGetArgumentCount = @import("std").mem.zeroes(GDExtensionCallableCustomGetArgumentCount),
};
pub const GDExtensionScriptInstanceDataPtr = ?*anyopaque;
pub const GDExtensionScriptInstanceSet = ?*const fn (GDExtensionScriptInstanceDataPtr, GDExtensionConstStringNamePtr, GDExtensionConstVariantPtr) callconv(.C) GDExtensionBool;
pub const GDExtensionScriptInstanceGet = ?*const fn (GDExtensionScriptInstanceDataPtr, GDExtensionConstStringNamePtr, GDExtensionVariantPtr) callconv(.C) GDExtensionBool;
pub const GDExtensionScriptInstanceGetPropertyList = ?*const fn (GDExtensionScriptInstanceDataPtr, [*c]u32) callconv(.C) [*c]const GDExtensionPropertyInfo;
pub const GDExtensionScriptInstanceFreePropertyList = ?*const fn (GDExtensionScriptInstanceDataPtr, [*c]const GDExtensionPropertyInfo) callconv(.C) void;
pub const GDExtensionScriptInstanceFreePropertyList2 = ?*const fn (GDExtensionScriptInstanceDataPtr, [*c]const GDExtensionPropertyInfo, u32) callconv(.C) void;
pub const GDExtensionScriptInstanceGetClassCategory = ?*const fn (GDExtensionScriptInstanceDataPtr, [*c]GDExtensionPropertyInfo) callconv(.C) GDExtensionBool;
pub const GDExtensionScriptInstanceGetPropertyType = ?*const fn (GDExtensionScriptInstanceDataPtr, GDExtensionConstStringNamePtr, [*c]GDExtensionBool) callconv(.C) GDExtensionVariantType;
pub const GDExtensionScriptInstanceValidateProperty = ?*const fn (GDExtensionScriptInstanceDataPtr, [*c]GDExtensionPropertyInfo) callconv(.C) GDExtensionBool;
pub const GDExtensionScriptInstancePropertyCanRevert = ?*const fn (GDExtensionScriptInstanceDataPtr, GDExtensionConstStringNamePtr) callconv(.C) GDExtensionBool;
pub const GDExtensionScriptInstancePropertyGetRevert = ?*const fn (GDExtensionScriptInstanceDataPtr, GDExtensionConstStringNamePtr, GDExtensionVariantPtr) callconv(.C) GDExtensionBool;
pub const GDExtensionScriptInstanceGetOwner = ?*const fn (GDExtensionScriptInstanceDataPtr) callconv(.C) GDExtensionObjectPtr;
pub const GDExtensionScriptInstancePropertyStateAdd = ?*const fn (GDExtensionConstStringNamePtr, GDExtensionConstVariantPtr, ?*anyopaque) callconv(.C) void;
pub const GDExtensionScriptInstanceGetPropertyState = ?*const fn (GDExtensionScriptInstanceDataPtr, GDExtensionScriptInstancePropertyStateAdd, ?*anyopaque) callconv(.C) void;
pub const GDExtensionScriptInstanceGetMethodList = ?*const fn (GDExtensionScriptInstanceDataPtr, [*c]u32) callconv(.C) [*c]const GDExtensionMethodInfo;
pub const GDExtensionScriptInstanceFreeMethodList = ?*const fn (GDExtensionScriptInstanceDataPtr, [*c]const GDExtensionMethodInfo) callconv(.C) void;
pub const GDExtensionScriptInstanceFreeMethodList2 = ?*const fn (GDExtensionScriptInstanceDataPtr, [*c]const GDExtensionMethodInfo, u32) callconv(.C) void;
pub const GDExtensionScriptInstanceHasMethod = ?*const fn (GDExtensionScriptInstanceDataPtr, GDExtensionConstStringNamePtr) callconv(.C) GDExtensionBool;
pub const GDExtensionScriptInstanceGetMethodArgumentCount = ?*const fn (GDExtensionScriptInstanceDataPtr, GDExtensionConstStringNamePtr, [*c]GDExtensionBool) callconv(.C) GDExtensionInt;
pub const GDExtensionScriptInstanceCall = ?*const fn (GDExtensionScriptInstanceDataPtr, GDExtensionConstStringNamePtr, [*c]const GDExtensionConstVariantPtr, GDExtensionInt, GDExtensionVariantPtr, [*c]GDExtensionCallError) callconv(.C) void;
pub const GDExtensionScriptInstanceNotification = ?*const fn (GDExtensionScriptInstanceDataPtr, i32) callconv(.C) void;
pub const GDExtensionScriptInstanceNotification2 = ?*const fn (GDExtensionScriptInstanceDataPtr, i32, GDExtensionBool) callconv(.C) void;
pub const GDExtensionScriptInstanceToString = ?*const fn (GDExtensionScriptInstanceDataPtr, [*c]GDExtensionBool, GDExtensionStringPtr) callconv(.C) void;
pub const GDExtensionScriptInstanceRefCountIncremented = ?*const fn (GDExtensionScriptInstanceDataPtr) callconv(.C) void;
pub const GDExtensionScriptInstanceRefCountDecremented = ?*const fn (GDExtensionScriptInstanceDataPtr) callconv(.C) GDExtensionBool;
pub const GDExtensionScriptInstanceGetScript = ?*const fn (GDExtensionScriptInstanceDataPtr) callconv(.C) GDExtensionObjectPtr;
pub const GDExtensionScriptInstanceIsPlaceholder = ?*const fn (GDExtensionScriptInstanceDataPtr) callconv(.C) GDExtensionBool;
pub const GDExtensionScriptLanguagePtr = ?*anyopaque;
pub const GDExtensionScriptInstanceGetLanguage = ?*const fn (GDExtensionScriptInstanceDataPtr) callconv(.C) GDExtensionScriptLanguagePtr;
pub const GDExtensionScriptInstanceFree = ?*const fn (GDExtensionScriptInstanceDataPtr) callconv(.C) void;
pub const GDExtensionScriptInstancePtr = ?*anyopaque;
pub const GDExtensionScriptInstanceInfo = extern struct {
    set_func: GDExtensionScriptInstanceSet = @import("std").mem.zeroes(GDExtensionScriptInstanceSet),
    get_func: GDExtensionScriptInstanceGet = @import("std").mem.zeroes(GDExtensionScriptInstanceGet),
    get_property_list_func: GDExtensionScriptInstanceGetPropertyList = @import("std").mem.zeroes(GDExtensionScriptInstanceGetPropertyList),
    free_property_list_func: GDExtensionScriptInstanceFreePropertyList = @import("std").mem.zeroes(GDExtensionScriptInstanceFreePropertyList),
    property_can_revert_func: GDExtensionScriptInstancePropertyCanRevert = @import("std").mem.zeroes(GDExtensionScriptInstancePropertyCanRevert),
    property_get_revert_func: GDExtensionScriptInstancePropertyGetRevert = @import("std").mem.zeroes(GDExtensionScriptInstancePropertyGetRevert),
    get_owner_func: GDExtensionScriptInstanceGetOwner = @import("std").mem.zeroes(GDExtensionScriptInstanceGetOwner),
    get_property_state_func: GDExtensionScriptInstanceGetPropertyState = @import("std").mem.zeroes(GDExtensionScriptInstanceGetPropertyState),
    get_method_list_func: GDExtensionScriptInstanceGetMethodList = @import("std").mem.zeroes(GDExtensionScriptInstanceGetMethodList),
    free_method_list_func: GDExtensionScriptInstanceFreeMethodList = @import("std").mem.zeroes(GDExtensionScriptInstanceFreeMethodList),
    get_property_type_func: GDExtensionScriptInstanceGetPropertyType = @import("std").mem.zeroes(GDExtensionScriptInstanceGetPropertyType),
    has_method_func: GDExtensionScriptInstanceHasMethod = @import("std").mem.zeroes(GDExtensionScriptInstanceHasMethod),
    call_func: GDExtensionScriptInstanceCall = @import("std").mem.zeroes(GDExtensionScriptInstanceCall),
    notification_func: GDExtensionScriptInstanceNotification = @import("std").mem.zeroes(GDExtensionScriptInstanceNotification),
    to_string_func: GDExtensionScriptInstanceToString = @import("std").mem.zeroes(GDExtensionScriptInstanceToString),
    refcount_incremented_func: GDExtensionScriptInstanceRefCountIncremented = @import("std").mem.zeroes(GDExtensionScriptInstanceRefCountIncremented),
    refcount_decremented_func: GDExtensionScriptInstanceRefCountDecremented = @import("std").mem.zeroes(GDExtensionScriptInstanceRefCountDecremented),
    get_script_func: GDExtensionScriptInstanceGetScript = @import("std").mem.zeroes(GDExtensionScriptInstanceGetScript),
    is_placeholder_func: GDExtensionScriptInstanceIsPlaceholder = @import("std").mem.zeroes(GDExtensionScriptInstanceIsPlaceholder),
    set_fallback_func: GDExtensionScriptInstanceSet = @import("std").mem.zeroes(GDExtensionScriptInstanceSet),
    get_fallback_func: GDExtensionScriptInstanceGet = @import("std").mem.zeroes(GDExtensionScriptInstanceGet),
    get_language_func: GDExtensionScriptInstanceGetLanguage = @import("std").mem.zeroes(GDExtensionScriptInstanceGetLanguage),
    free_func: GDExtensionScriptInstanceFree = @import("std").mem.zeroes(GDExtensionScriptInstanceFree),
};
pub const GDExtensionScriptInstanceInfo2 = extern struct {
    set_func: GDExtensionScriptInstanceSet = @import("std").mem.zeroes(GDExtensionScriptInstanceSet),
    get_func: GDExtensionScriptInstanceGet = @import("std").mem.zeroes(GDExtensionScriptInstanceGet),
    get_property_list_func: GDExtensionScriptInstanceGetPropertyList = @import("std").mem.zeroes(GDExtensionScriptInstanceGetPropertyList),
    free_property_list_func: GDExtensionScriptInstanceFreePropertyList = @import("std").mem.zeroes(GDExtensionScriptInstanceFreePropertyList),
    get_class_category_func: GDExtensionScriptInstanceGetClassCategory = @import("std").mem.zeroes(GDExtensionScriptInstanceGetClassCategory),
    property_can_revert_func: GDExtensionScriptInstancePropertyCanRevert = @import("std").mem.zeroes(GDExtensionScriptInstancePropertyCanRevert),
    property_get_revert_func: GDExtensionScriptInstancePropertyGetRevert = @import("std").mem.zeroes(GDExtensionScriptInstancePropertyGetRevert),
    get_owner_func: GDExtensionScriptInstanceGetOwner = @import("std").mem.zeroes(GDExtensionScriptInstanceGetOwner),
    get_property_state_func: GDExtensionScriptInstanceGetPropertyState = @import("std").mem.zeroes(GDExtensionScriptInstanceGetPropertyState),
    get_method_list_func: GDExtensionScriptInstanceGetMethodList = @import("std").mem.zeroes(GDExtensionScriptInstanceGetMethodList),
    free_method_list_func: GDExtensionScriptInstanceFreeMethodList = @import("std").mem.zeroes(GDExtensionScriptInstanceFreeMethodList),
    get_property_type_func: GDExtensionScriptInstanceGetPropertyType = @import("std").mem.zeroes(GDExtensionScriptInstanceGetPropertyType),
    validate_property_func: GDExtensionScriptInstanceValidateProperty = @import("std").mem.zeroes(GDExtensionScriptInstanceValidateProperty),
    has_method_func: GDExtensionScriptInstanceHasMethod = @import("std").mem.zeroes(GDExtensionScriptInstanceHasMethod),
    call_func: GDExtensionScriptInstanceCall = @import("std").mem.zeroes(GDExtensionScriptInstanceCall),
    notification_func: GDExtensionScriptInstanceNotification2 = @import("std").mem.zeroes(GDExtensionScriptInstanceNotification2),
    to_string_func: GDExtensionScriptInstanceToString = @import("std").mem.zeroes(GDExtensionScriptInstanceToString),
    refcount_incremented_func: GDExtensionScriptInstanceRefCountIncremented = @import("std").mem.zeroes(GDExtensionScriptInstanceRefCountIncremented),
    refcount_decremented_func: GDExtensionScriptInstanceRefCountDecremented = @import("std").mem.zeroes(GDExtensionScriptInstanceRefCountDecremented),
    get_script_func: GDExtensionScriptInstanceGetScript = @import("std").mem.zeroes(GDExtensionScriptInstanceGetScript),
    is_placeholder_func: GDExtensionScriptInstanceIsPlaceholder = @import("std").mem.zeroes(GDExtensionScriptInstanceIsPlaceholder),
    set_fallback_func: GDExtensionScriptInstanceSet = @import("std").mem.zeroes(GDExtensionScriptInstanceSet),
    get_fallback_func: GDExtensionScriptInstanceGet = @import("std").mem.zeroes(GDExtensionScriptInstanceGet),
    get_language_func: GDExtensionScriptInstanceGetLanguage = @import("std").mem.zeroes(GDExtensionScriptInstanceGetLanguage),
    free_func: GDExtensionScriptInstanceFree = @import("std").mem.zeroes(GDExtensionScriptInstanceFree),
};
pub const GDExtensionScriptInstanceInfo3 = extern struct {
    set_func: GDExtensionScriptInstanceSet = @import("std").mem.zeroes(GDExtensionScriptInstanceSet),
    get_func: GDExtensionScriptInstanceGet = @import("std").mem.zeroes(GDExtensionScriptInstanceGet),
    get_property_list_func: GDExtensionScriptInstanceGetPropertyList = @import("std").mem.zeroes(GDExtensionScriptInstanceGetPropertyList),
    free_property_list_func: GDExtensionScriptInstanceFreePropertyList2 = @import("std").mem.zeroes(GDExtensionScriptInstanceFreePropertyList2),
    get_class_category_func: GDExtensionScriptInstanceGetClassCategory = @import("std").mem.zeroes(GDExtensionScriptInstanceGetClassCategory),
    property_can_revert_func: GDExtensionScriptInstancePropertyCanRevert = @import("std").mem.zeroes(GDExtensionScriptInstancePropertyCanRevert),
    property_get_revert_func: GDExtensionScriptInstancePropertyGetRevert = @import("std").mem.zeroes(GDExtensionScriptInstancePropertyGetRevert),
    get_owner_func: GDExtensionScriptInstanceGetOwner = @import("std").mem.zeroes(GDExtensionScriptInstanceGetOwner),
    get_property_state_func: GDExtensionScriptInstanceGetPropertyState = @import("std").mem.zeroes(GDExtensionScriptInstanceGetPropertyState),
    get_method_list_func: GDExtensionScriptInstanceGetMethodList = @import("std").mem.zeroes(GDExtensionScriptInstanceGetMethodList),
    free_method_list_func: GDExtensionScriptInstanceFreeMethodList2 = @import("std").mem.zeroes(GDExtensionScriptInstanceFreeMethodList2),
    get_property_type_func: GDExtensionScriptInstanceGetPropertyType = @import("std").mem.zeroes(GDExtensionScriptInstanceGetPropertyType),
    validate_property_func: GDExtensionScriptInstanceValidateProperty = @import("std").mem.zeroes(GDExtensionScriptInstanceValidateProperty),
    has_method_func: GDExtensionScriptInstanceHasMethod = @import("std").mem.zeroes(GDExtensionScriptInstanceHasMethod),
    get_method_argument_count_func: GDExtensionScriptInstanceGetMethodArgumentCount = @import("std").mem.zeroes(GDExtensionScriptInstanceGetMethodArgumentCount),
    call_func: GDExtensionScriptInstanceCall = @import("std").mem.zeroes(GDExtensionScriptInstanceCall),
    notification_func: GDExtensionScriptInstanceNotification2 = @import("std").mem.zeroes(GDExtensionScriptInstanceNotification2),
    to_string_func: GDExtensionScriptInstanceToString = @import("std").mem.zeroes(GDExtensionScriptInstanceToString),
    refcount_incremented_func: GDExtensionScriptInstanceRefCountIncremented = @import("std").mem.zeroes(GDExtensionScriptInstanceRefCountIncremented),
    refcount_decremented_func: GDExtensionScriptInstanceRefCountDecremented = @import("std").mem.zeroes(GDExtensionScriptInstanceRefCountDecremented),
    get_script_func: GDExtensionScriptInstanceGetScript = @import("std").mem.zeroes(GDExtensionScriptInstanceGetScript),
    is_placeholder_func: GDExtensionScriptInstanceIsPlaceholder = @import("std").mem.zeroes(GDExtensionScriptInstanceIsPlaceholder),
    set_fallback_func: GDExtensionScriptInstanceSet = @import("std").mem.zeroes(GDExtensionScriptInstanceSet),
    get_fallback_func: GDExtensionScriptInstanceGet = @import("std").mem.zeroes(GDExtensionScriptInstanceGet),
    get_language_func: GDExtensionScriptInstanceGetLanguage = @import("std").mem.zeroes(GDExtensionScriptInstanceGetLanguage),
    free_func: GDExtensionScriptInstanceFree = @import("std").mem.zeroes(GDExtensionScriptInstanceFree),
};
pub const GDEXTENSION_INITIALIZATION_CORE: c_int = 0;
pub const GDEXTENSION_INITIALIZATION_SERVERS: c_int = 1;
pub const GDEXTENSION_INITIALIZATION_SCENE: c_int = 2;
pub const GDEXTENSION_INITIALIZATION_EDITOR: c_int = 3;
pub const GDEXTENSION_MAX_INITIALIZATION_LEVEL: c_int = 4;
pub const GDExtensionInitializationLevel = c_uint;
pub const GDExtensionInitialization = extern struct {
    minimum_initialization_level: GDExtensionInitializationLevel = @import("std").mem.zeroes(GDExtensionInitializationLevel),
    userdata: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    initialize: ?*const fn (?*anyopaque, GDExtensionInitializationLevel) callconv(.C) void = @import("std").mem.zeroes(?*const fn (?*anyopaque, GDExtensionInitializationLevel) callconv(.C) void),
    deinitialize: ?*const fn (?*anyopaque, GDExtensionInitializationLevel) callconv(.C) void = @import("std").mem.zeroes(?*const fn (?*anyopaque, GDExtensionInitializationLevel) callconv(.C) void),
};
pub const GDExtensionInterfaceFunctionPtr = ?*const fn (...) callconv(.C) void;
pub const GDExtensionInterfaceGetProcAddress = ?*const fn ([*c]const u8) callconv(.C) GDExtensionInterfaceFunctionPtr;
pub const GDExtensionInitializationFunction = ?*const fn (GDExtensionInterfaceGetProcAddress, GDExtensionClassLibraryPtr, [*c]GDExtensionInitialization) callconv(.C) GDExtensionBool;
pub const GDExtensionGodotVersion = extern struct {
    major: u32 = @import("std").mem.zeroes(u32),
    minor: u32 = @import("std").mem.zeroes(u32),
    patch: u32 = @import("std").mem.zeroes(u32),
    string: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
};
pub const GDExtensionInterfaceGetGodotVersion = ?*const fn ([*c]GDExtensionGodotVersion) callconv(.C) void;
pub const GDExtensionInterfaceMemAlloc = ?*const fn (usize) callconv(.C) ?*anyopaque;
pub const GDExtensionInterfaceMemRealloc = ?*const fn (?*anyopaque, usize) callconv(.C) ?*anyopaque;
pub const GDExtensionInterfaceMemFree = ?*const fn (?*anyopaque) callconv(.C) void;
pub const GDExtensionInterfacePrintError = ?*const fn ([*c]const u8, [*c]const u8, [*c]const u8, i32, GDExtensionBool) callconv(.C) void;
pub const GDExtensionInterfacePrintErrorWithMessage = ?*const fn ([*c]const u8, [*c]const u8, [*c]const u8, [*c]const u8, i32, GDExtensionBool) callconv(.C) void;
pub const GDExtensionInterfacePrintWarning = ?*const fn ([*c]const u8, [*c]const u8, [*c]const u8, i32, GDExtensionBool) callconv(.C) void;
pub const GDExtensionInterfacePrintWarningWithMessage = ?*const fn ([*c]const u8, [*c]const u8, [*c]const u8, [*c]const u8, i32, GDExtensionBool) callconv(.C) void;
pub const GDExtensionInterfacePrintScriptError = ?*const fn ([*c]const u8, [*c]const u8, [*c]const u8, i32, GDExtensionBool) callconv(.C) void;
pub const GDExtensionInterfacePrintScriptErrorWithMessage = ?*const fn ([*c]const u8, [*c]const u8, [*c]const u8, [*c]const u8, i32, GDExtensionBool) callconv(.C) void;
pub const GDExtensionInterfaceGetNativeStructSize = ?*const fn (GDExtensionConstStringNamePtr) callconv(.C) u64;
pub const GDExtensionInterfaceVariantNewCopy = ?*const fn (GDExtensionUninitializedVariantPtr, GDExtensionConstVariantPtr) callconv(.C) void;
pub const GDExtensionInterfaceVariantNewNil = ?*const fn (GDExtensionUninitializedVariantPtr) callconv(.C) void;
pub const GDExtensionInterfaceVariantDestroy = ?*const fn (GDExtensionVariantPtr) callconv(.C) void;
pub const GDExtensionInterfaceVariantCall = ?*const fn (GDExtensionVariantPtr, GDExtensionConstStringNamePtr, [*c]const GDExtensionConstVariantPtr, GDExtensionInt, GDExtensionUninitializedVariantPtr, [*c]GDExtensionCallError) callconv(.C) void;
pub const GDExtensionInterfaceVariantCallStatic = ?*const fn (GDExtensionVariantType, GDExtensionConstStringNamePtr, [*c]const GDExtensionConstVariantPtr, GDExtensionInt, GDExtensionUninitializedVariantPtr, [*c]GDExtensionCallError) callconv(.C) void;
pub const GDExtensionInterfaceVariantEvaluate = ?*const fn (GDExtensionVariantOperator, GDExtensionConstVariantPtr, GDExtensionConstVariantPtr, GDExtensionUninitializedVariantPtr, [*c]GDExtensionBool) callconv(.C) void;
pub const GDExtensionInterfaceVariantSet = ?*const fn (GDExtensionVariantPtr, GDExtensionConstVariantPtr, GDExtensionConstVariantPtr, [*c]GDExtensionBool) callconv(.C) void;
pub const GDExtensionInterfaceVariantSetNamed = ?*const fn (GDExtensionVariantPtr, GDExtensionConstStringNamePtr, GDExtensionConstVariantPtr, [*c]GDExtensionBool) callconv(.C) void;
pub const GDExtensionInterfaceVariantSetKeyed = ?*const fn (GDExtensionVariantPtr, GDExtensionConstVariantPtr, GDExtensionConstVariantPtr, [*c]GDExtensionBool) callconv(.C) void;
pub const GDExtensionInterfaceVariantSetIndexed = ?*const fn (GDExtensionVariantPtr, GDExtensionInt, GDExtensionConstVariantPtr, [*c]GDExtensionBool, [*c]GDExtensionBool) callconv(.C) void;
pub const GDExtensionInterfaceVariantGet = ?*const fn (GDExtensionConstVariantPtr, GDExtensionConstVariantPtr, GDExtensionUninitializedVariantPtr, [*c]GDExtensionBool) callconv(.C) void;
pub const GDExtensionInterfaceVariantGetNamed = ?*const fn (GDExtensionConstVariantPtr, GDExtensionConstStringNamePtr, GDExtensionUninitializedVariantPtr, [*c]GDExtensionBool) callconv(.C) void;
pub const GDExtensionInterfaceVariantGetKeyed = ?*const fn (GDExtensionConstVariantPtr, GDExtensionConstVariantPtr, GDExtensionUninitializedVariantPtr, [*c]GDExtensionBool) callconv(.C) void;
pub const GDExtensionInterfaceVariantGetIndexed = ?*const fn (GDExtensionConstVariantPtr, GDExtensionInt, GDExtensionUninitializedVariantPtr, [*c]GDExtensionBool, [*c]GDExtensionBool) callconv(.C) void;
pub const GDExtensionInterfaceVariantIterInit = ?*const fn (GDExtensionConstVariantPtr, GDExtensionUninitializedVariantPtr, [*c]GDExtensionBool) callconv(.C) GDExtensionBool;
pub const GDExtensionInterfaceVariantIterNext = ?*const fn (GDExtensionConstVariantPtr, GDExtensionVariantPtr, [*c]GDExtensionBool) callconv(.C) GDExtensionBool;
pub const GDExtensionInterfaceVariantIterGet = ?*const fn (GDExtensionConstVariantPtr, GDExtensionVariantPtr, GDExtensionUninitializedVariantPtr, [*c]GDExtensionBool) callconv(.C) void;
pub const GDExtensionInterfaceVariantHash = ?*const fn (GDExtensionConstVariantPtr) callconv(.C) GDExtensionInt;
pub const GDExtensionInterfaceVariantRecursiveHash = ?*const fn (GDExtensionConstVariantPtr, GDExtensionInt) callconv(.C) GDExtensionInt;
pub const GDExtensionInterfaceVariantHashCompare = ?*const fn (GDExtensionConstVariantPtr, GDExtensionConstVariantPtr) callconv(.C) GDExtensionBool;
pub const GDExtensionInterfaceVariantBooleanize = ?*const fn (GDExtensionConstVariantPtr) callconv(.C) GDExtensionBool;
pub const GDExtensionInterfaceVariantDuplicate = ?*const fn (GDExtensionConstVariantPtr, GDExtensionVariantPtr, GDExtensionBool) callconv(.C) void;
pub const GDExtensionInterfaceVariantStringify = ?*const fn (GDExtensionConstVariantPtr, GDExtensionStringPtr) callconv(.C) void;
pub const GDExtensionInterfaceVariantGetType = ?*const fn (GDExtensionConstVariantPtr) callconv(.C) GDExtensionVariantType;
pub const GDExtensionInterfaceVariantHasMethod = ?*const fn (GDExtensionConstVariantPtr, GDExtensionConstStringNamePtr) callconv(.C) GDExtensionBool;
pub const GDExtensionInterfaceVariantHasMember = ?*const fn (GDExtensionVariantType, GDExtensionConstStringNamePtr) callconv(.C) GDExtensionBool;
pub const GDExtensionInterfaceVariantHasKey = ?*const fn (GDExtensionConstVariantPtr, GDExtensionConstVariantPtr, [*c]GDExtensionBool) callconv(.C) GDExtensionBool;
pub const GDExtensionInterfaceVariantGetTypeName = ?*const fn (GDExtensionVariantType, GDExtensionUninitializedStringPtr) callconv(.C) void;
pub const GDExtensionInterfaceVariantCanConvert = ?*const fn (GDExtensionVariantType, GDExtensionVariantType) callconv(.C) GDExtensionBool;
pub const GDExtensionInterfaceVariantCanConvertStrict = ?*const fn (GDExtensionVariantType, GDExtensionVariantType) callconv(.C) GDExtensionBool;
pub const GDExtensionInterfaceGetVariantFromTypeConstructor = ?*const fn (GDExtensionVariantType) callconv(.C) GDExtensionVariantFromTypeConstructorFunc;
pub const GDExtensionInterfaceGetVariantToTypeConstructor = ?*const fn (GDExtensionVariantType) callconv(.C) GDExtensionTypeFromVariantConstructorFunc;
pub const GDExtensionInterfaceVariantGetPtrOperatorEvaluator = ?*const fn (GDExtensionVariantOperator, GDExtensionVariantType, GDExtensionVariantType) callconv(.C) GDExtensionPtrOperatorEvaluator;
pub const GDExtensionInterfaceVariantGetPtrBuiltinMethod = ?*const fn (GDExtensionVariantType, GDExtensionConstStringNamePtr, GDExtensionInt) callconv(.C) GDExtensionPtrBuiltInMethod;
pub const GDExtensionInterfaceVariantGetPtrConstructor = ?*const fn (GDExtensionVariantType, i32) callconv(.C) GDExtensionPtrConstructor;
pub const GDExtensionInterfaceVariantGetPtrDestructor = ?*const fn (GDExtensionVariantType) callconv(.C) GDExtensionPtrDestructor;
pub const GDExtensionInterfaceVariantConstruct = ?*const fn (GDExtensionVariantType, GDExtensionUninitializedVariantPtr, [*c]const GDExtensionConstVariantPtr, i32, [*c]GDExtensionCallError) callconv(.C) void;
pub const GDExtensionInterfaceVariantGetPtrSetter = ?*const fn (GDExtensionVariantType, GDExtensionConstStringNamePtr) callconv(.C) GDExtensionPtrSetter;
pub const GDExtensionInterfaceVariantGetPtrGetter = ?*const fn (GDExtensionVariantType, GDExtensionConstStringNamePtr) callconv(.C) GDExtensionPtrGetter;
pub const GDExtensionInterfaceVariantGetPtrIndexedSetter = ?*const fn (GDExtensionVariantType) callconv(.C) GDExtensionPtrIndexedSetter;
pub const GDExtensionInterfaceVariantGetPtrIndexedGetter = ?*const fn (GDExtensionVariantType) callconv(.C) GDExtensionPtrIndexedGetter;
pub const GDExtensionInterfaceVariantGetPtrKeyedSetter = ?*const fn (GDExtensionVariantType) callconv(.C) GDExtensionPtrKeyedSetter;
pub const GDExtensionInterfaceVariantGetPtrKeyedGetter = ?*const fn (GDExtensionVariantType) callconv(.C) GDExtensionPtrKeyedGetter;
pub const GDExtensionInterfaceVariantGetPtrKeyedChecker = ?*const fn (GDExtensionVariantType) callconv(.C) GDExtensionPtrKeyedChecker;
pub const GDExtensionInterfaceVariantGetConstantValue = ?*const fn (GDExtensionVariantType, GDExtensionConstStringNamePtr, GDExtensionUninitializedVariantPtr) callconv(.C) void;
pub const GDExtensionInterfaceVariantGetPtrUtilityFunction = ?*const fn (GDExtensionConstStringNamePtr, GDExtensionInt) callconv(.C) GDExtensionPtrUtilityFunction;
pub const GDExtensionInterfaceStringNewWithLatin1Chars = ?*const fn (GDExtensionUninitializedStringPtr, [*c]const u8) callconv(.C) void;
pub const GDExtensionInterfaceStringNewWithUtf8Chars = ?*const fn (GDExtensionUninitializedStringPtr, [*c]const u8) callconv(.C) void;
pub const GDExtensionInterfaceStringNewWithUtf16Chars = ?*const fn (GDExtensionUninitializedStringPtr, [*c]const char16_t) callconv(.C) void;
pub const GDExtensionInterfaceStringNewWithUtf32Chars = ?*const fn (GDExtensionUninitializedStringPtr, [*c]const char32_t) callconv(.C) void;
pub const GDExtensionInterfaceStringNewWithWideChars = ?*const fn (GDExtensionUninitializedStringPtr, [*c]const wchar_t) callconv(.C) void;
pub const GDExtensionInterfaceStringNewWithLatin1CharsAndLen = ?*const fn (GDExtensionUninitializedStringPtr, [*c]const u8, GDExtensionInt) callconv(.C) void;
pub const GDExtensionInterfaceStringNewWithUtf8CharsAndLen = ?*const fn (GDExtensionUninitializedStringPtr, [*c]const u8, GDExtensionInt) callconv(.C) void;
pub const GDExtensionInterfaceStringNewWithUtf16CharsAndLen = ?*const fn (GDExtensionUninitializedStringPtr, [*c]const char16_t, GDExtensionInt) callconv(.C) void;
pub const GDExtensionInterfaceStringNewWithUtf32CharsAndLen = ?*const fn (GDExtensionUninitializedStringPtr, [*c]const char32_t, GDExtensionInt) callconv(.C) void;
pub const GDExtensionInterfaceStringNewWithWideCharsAndLen = ?*const fn (GDExtensionUninitializedStringPtr, [*c]const wchar_t, GDExtensionInt) callconv(.C) void;
pub const GDExtensionInterfaceStringToLatin1Chars = ?*const fn (GDExtensionConstStringPtr, [*c]u8, GDExtensionInt) callconv(.C) GDExtensionInt;
pub const GDExtensionInterfaceStringToUtf8Chars = ?*const fn (GDExtensionConstStringPtr, [*c]u8, GDExtensionInt) callconv(.C) GDExtensionInt;
pub const GDExtensionInterfaceStringToUtf16Chars = ?*const fn (GDExtensionConstStringPtr, [*c]char16_t, GDExtensionInt) callconv(.C) GDExtensionInt;
pub const GDExtensionInterfaceStringToUtf32Chars = ?*const fn (GDExtensionConstStringPtr, [*c]char32_t, GDExtensionInt) callconv(.C) GDExtensionInt;
pub const GDExtensionInterfaceStringToWideChars = ?*const fn (GDExtensionConstStringPtr, [*c]wchar_t, GDExtensionInt) callconv(.C) GDExtensionInt;
pub const GDExtensionInterfaceStringOperatorIndex = ?*const fn (GDExtensionStringPtr, GDExtensionInt) callconv(.C) [*c]char32_t;
pub const GDExtensionInterfaceStringOperatorIndexConst = ?*const fn (GDExtensionConstStringPtr, GDExtensionInt) callconv(.C) [*c]const char32_t;
pub const GDExtensionInterfaceStringOperatorPlusEqString = ?*const fn (GDExtensionStringPtr, GDExtensionConstStringPtr) callconv(.C) void;
pub const GDExtensionInterfaceStringOperatorPlusEqChar = ?*const fn (GDExtensionStringPtr, char32_t) callconv(.C) void;
pub const GDExtensionInterfaceStringOperatorPlusEqCstr = ?*const fn (GDExtensionStringPtr, [*c]const u8) callconv(.C) void;
pub const GDExtensionInterfaceStringOperatorPlusEqWcstr = ?*const fn (GDExtensionStringPtr, [*c]const wchar_t) callconv(.C) void;
pub const GDExtensionInterfaceStringOperatorPlusEqC32str = ?*const fn (GDExtensionStringPtr, [*c]const char32_t) callconv(.C) void;
pub const GDExtensionInterfaceStringResize = ?*const fn (GDExtensionStringPtr, GDExtensionInt) callconv(.C) GDExtensionInt;
pub const GDExtensionInterfaceStringNameNewWithLatin1Chars = ?*const fn (GDExtensionUninitializedStringNamePtr, [*c]const u8, GDExtensionBool) callconv(.C) void;
pub const GDExtensionInterfaceStringNameNewWithUtf8Chars = ?*const fn (GDExtensionUninitializedStringNamePtr, [*c]const u8) callconv(.C) void;
pub const GDExtensionInterfaceStringNameNewWithUtf8CharsAndLen = ?*const fn (GDExtensionUninitializedStringNamePtr, [*c]const u8, GDExtensionInt) callconv(.C) void;
pub const GDExtensionInterfaceXmlParserOpenBuffer = ?*const fn (GDExtensionObjectPtr, [*c]const u8, usize) callconv(.C) GDExtensionInt;
pub const GDExtensionInterfaceFileAccessStoreBuffer = ?*const fn (GDExtensionObjectPtr, [*c]const u8, u64) callconv(.C) void;
pub const GDExtensionInterfaceFileAccessGetBuffer = ?*const fn (GDExtensionConstObjectPtr, [*c]u8, u64) callconv(.C) u64;
pub const GDExtensionInterfaceWorkerThreadPoolAddNativeGroupTask = ?*const fn (GDExtensionObjectPtr, ?*const fn (?*anyopaque, u32) callconv(.C) void, ?*anyopaque, c_int, c_int, GDExtensionBool, GDExtensionConstStringPtr) callconv(.C) i64;
pub const GDExtensionInterfaceWorkerThreadPoolAddNativeTask = ?*const fn (GDExtensionObjectPtr, ?*const fn (?*anyopaque) callconv(.C) void, ?*anyopaque, GDExtensionBool, GDExtensionConstStringPtr) callconv(.C) i64;
pub const GDExtensionInterfacePackedByteArrayOperatorIndex = ?*const fn (GDExtensionTypePtr, GDExtensionInt) callconv(.C) [*c]u8;
pub const GDExtensionInterfacePackedByteArrayOperatorIndexConst = ?*const fn (GDExtensionConstTypePtr, GDExtensionInt) callconv(.C) [*c]const u8;
pub const GDExtensionInterfacePackedFloat32ArrayOperatorIndex = ?*const fn (GDExtensionTypePtr, GDExtensionInt) callconv(.C) [*c]f32;
pub const GDExtensionInterfacePackedFloat32ArrayOperatorIndexConst = ?*const fn (GDExtensionConstTypePtr, GDExtensionInt) callconv(.C) [*c]const f32;
pub const GDExtensionInterfacePackedFloat64ArrayOperatorIndex = ?*const fn (GDExtensionTypePtr, GDExtensionInt) callconv(.C) [*c]f64;
pub const GDExtensionInterfacePackedFloat64ArrayOperatorIndexConst = ?*const fn (GDExtensionConstTypePtr, GDExtensionInt) callconv(.C) [*c]const f64;
pub const GDExtensionInterfacePackedInt32ArrayOperatorIndex = ?*const fn (GDExtensionTypePtr, GDExtensionInt) callconv(.C) [*c]i32;
pub const GDExtensionInterfacePackedInt32ArrayOperatorIndexConst = ?*const fn (GDExtensionConstTypePtr, GDExtensionInt) callconv(.C) [*c]const i32;
pub const GDExtensionInterfacePackedInt64ArrayOperatorIndex = ?*const fn (GDExtensionTypePtr, GDExtensionInt) callconv(.C) [*c]i64;
pub const GDExtensionInterfacePackedInt64ArrayOperatorIndexConst = ?*const fn (GDExtensionConstTypePtr, GDExtensionInt) callconv(.C) [*c]const i64;
pub const GDExtensionInterfacePackedStringArrayOperatorIndex = ?*const fn (GDExtensionTypePtr, GDExtensionInt) callconv(.C) GDExtensionStringPtr;
pub const GDExtensionInterfacePackedStringArrayOperatorIndexConst = ?*const fn (GDExtensionConstTypePtr, GDExtensionInt) callconv(.C) GDExtensionStringPtr;
pub const GDExtensionInterfacePackedVector2ArrayOperatorIndex = ?*const fn (GDExtensionTypePtr, GDExtensionInt) callconv(.C) GDExtensionTypePtr;
pub const GDExtensionInterfacePackedVector2ArrayOperatorIndexConst = ?*const fn (GDExtensionConstTypePtr, GDExtensionInt) callconv(.C) GDExtensionTypePtr;
pub const GDExtensionInterfacePackedVector3ArrayOperatorIndex = ?*const fn (GDExtensionTypePtr, GDExtensionInt) callconv(.C) GDExtensionTypePtr;
pub const GDExtensionInterfacePackedVector3ArrayOperatorIndexConst = ?*const fn (GDExtensionConstTypePtr, GDExtensionInt) callconv(.C) GDExtensionTypePtr;
pub const GDExtensionInterfacePackedVector4ArrayOperatorIndex = ?*const fn (GDExtensionTypePtr, GDExtensionInt) callconv(.C) GDExtensionTypePtr;
pub const GDExtensionInterfacePackedVector4ArrayOperatorIndexConst = ?*const fn (GDExtensionConstTypePtr, GDExtensionInt) callconv(.C) GDExtensionTypePtr;
pub const GDExtensionInterfacePackedColorArrayOperatorIndex = ?*const fn (GDExtensionTypePtr, GDExtensionInt) callconv(.C) GDExtensionTypePtr;
pub const GDExtensionInterfacePackedColorArrayOperatorIndexConst = ?*const fn (GDExtensionConstTypePtr, GDExtensionInt) callconv(.C) GDExtensionTypePtr;
pub const GDExtensionInterfaceArrayOperatorIndex = ?*const fn (GDExtensionTypePtr, GDExtensionInt) callconv(.C) GDExtensionVariantPtr;
pub const GDExtensionInterfaceArrayOperatorIndexConst = ?*const fn (GDExtensionConstTypePtr, GDExtensionInt) callconv(.C) GDExtensionVariantPtr;
pub const GDExtensionInterfaceArrayRef = ?*const fn (GDExtensionTypePtr, GDExtensionConstTypePtr) callconv(.C) void;
pub const GDExtensionInterfaceArraySetTyped = ?*const fn (GDExtensionTypePtr, GDExtensionVariantType, GDExtensionConstStringNamePtr, GDExtensionConstVariantPtr) callconv(.C) void;
pub const GDExtensionInterfaceDictionaryOperatorIndex = ?*const fn (GDExtensionTypePtr, GDExtensionConstVariantPtr) callconv(.C) GDExtensionVariantPtr;
pub const GDExtensionInterfaceDictionaryOperatorIndexConst = ?*const fn (GDExtensionConstTypePtr, GDExtensionConstVariantPtr) callconv(.C) GDExtensionVariantPtr;
pub const GDExtensionInterfaceObjectMethodBindCall = ?*const fn (GDExtensionMethodBindPtr, GDExtensionObjectPtr, [*c]const GDExtensionConstVariantPtr, GDExtensionInt, GDExtensionUninitializedVariantPtr, [*c]GDExtensionCallError) callconv(.C) void;
pub const GDExtensionInterfaceObjectMethodBindPtrcall = ?*const fn (GDExtensionMethodBindPtr, GDExtensionObjectPtr, [*c]const GDExtensionConstTypePtr, GDExtensionTypePtr) callconv(.C) void;
pub const GDExtensionInterfaceObjectDestroy = ?*const fn (GDExtensionObjectPtr) callconv(.C) void;
pub const GDExtensionInterfaceGlobalGetSingleton = ?*const fn (GDExtensionConstStringNamePtr) callconv(.C) GDExtensionObjectPtr;
pub const GDExtensionInterfaceObjectGetInstanceBinding = ?*const fn (GDExtensionObjectPtr, ?*anyopaque, [*c]const GDExtensionInstanceBindingCallbacks) callconv(.C) ?*anyopaque;
pub const GDExtensionInterfaceObjectSetInstanceBinding = ?*const fn (GDExtensionObjectPtr, ?*anyopaque, ?*anyopaque, [*c]const GDExtensionInstanceBindingCallbacks) callconv(.C) void;
pub const GDExtensionInterfaceObjectFreeInstanceBinding = ?*const fn (GDExtensionObjectPtr, ?*anyopaque) callconv(.C) void;
pub const GDExtensionInterfaceObjectSetInstance = ?*const fn (GDExtensionObjectPtr, GDExtensionConstStringNamePtr, GDExtensionClassInstancePtr) callconv(.C) void;
pub const GDExtensionInterfaceObjectGetClassName = ?*const fn (GDExtensionConstObjectPtr, GDExtensionClassLibraryPtr, GDExtensionUninitializedStringNamePtr) callconv(.C) GDExtensionBool;
pub const GDExtensionInterfaceObjectCastTo = ?*const fn (GDExtensionConstObjectPtr, ?*anyopaque) callconv(.C) GDExtensionObjectPtr;
pub const GDExtensionInterfaceObjectGetInstanceFromId = ?*const fn (GDObjectInstanceID) callconv(.C) GDExtensionObjectPtr;
pub const GDExtensionInterfaceObjectGetInstanceId = ?*const fn (GDExtensionConstObjectPtr) callconv(.C) GDObjectInstanceID;
pub const GDExtensionInterfaceObjectHasScriptMethod = ?*const fn (GDExtensionConstObjectPtr, GDExtensionConstStringNamePtr) callconv(.C) GDExtensionBool;
pub const GDExtensionInterfaceObjectCallScriptMethod = ?*const fn (GDExtensionObjectPtr, GDExtensionConstStringNamePtr, [*c]const GDExtensionConstVariantPtr, GDExtensionInt, GDExtensionUninitializedVariantPtr, [*c]GDExtensionCallError) callconv(.C) void;
pub const GDExtensionInterfaceRefGetObject = ?*const fn (GDExtensionConstRefPtr) callconv(.C) GDExtensionObjectPtr;
pub const GDExtensionInterfaceRefSetObject = ?*const fn (GDExtensionRefPtr, GDExtensionObjectPtr) callconv(.C) void;
pub const GDExtensionInterfaceScriptInstanceCreate = ?*const fn ([*c]const GDExtensionScriptInstanceInfo, GDExtensionScriptInstanceDataPtr) callconv(.C) GDExtensionScriptInstancePtr;
pub const GDExtensionInterfaceScriptInstanceCreate2 = ?*const fn ([*c]const GDExtensionScriptInstanceInfo2, GDExtensionScriptInstanceDataPtr) callconv(.C) GDExtensionScriptInstancePtr;
pub const GDExtensionInterfaceScriptInstanceCreate3 = ?*const fn ([*c]const GDExtensionScriptInstanceInfo3, GDExtensionScriptInstanceDataPtr) callconv(.C) GDExtensionScriptInstancePtr;
pub const GDExtensionInterfacePlaceHolderScriptInstanceCreate = ?*const fn (GDExtensionObjectPtr, GDExtensionObjectPtr, GDExtensionObjectPtr) callconv(.C) GDExtensionScriptInstancePtr;
pub const GDExtensionInterfacePlaceHolderScriptInstanceUpdate = ?*const fn (GDExtensionScriptInstancePtr, GDExtensionConstTypePtr, GDExtensionConstTypePtr) callconv(.C) void;
pub const GDExtensionInterfaceObjectGetScriptInstance = ?*const fn (GDExtensionConstObjectPtr, GDExtensionObjectPtr) callconv(.C) GDExtensionScriptInstanceDataPtr;
pub const GDExtensionInterfaceCallableCustomCreate = ?*const fn (GDExtensionUninitializedTypePtr, [*c]GDExtensionCallableCustomInfo) callconv(.C) void;
pub const GDExtensionInterfaceCallableCustomCreate2 = ?*const fn (GDExtensionUninitializedTypePtr, [*c]GDExtensionCallableCustomInfo2) callconv(.C) void;
pub const GDExtensionInterfaceCallableCustomGetUserData = ?*const fn (GDExtensionConstTypePtr, ?*anyopaque) callconv(.C) ?*anyopaque;
pub const GDExtensionInterfaceClassdbConstructObject = ?*const fn (GDExtensionConstStringNamePtr) callconv(.C) GDExtensionObjectPtr;
pub const GDExtensionInterfaceClassdbGetMethodBind = ?*const fn (GDExtensionConstStringNamePtr, GDExtensionConstStringNamePtr, GDExtensionInt) callconv(.C) GDExtensionMethodBindPtr;
pub const GDExtensionInterfaceClassdbGetClassTag = ?*const fn (GDExtensionConstStringNamePtr) callconv(.C) ?*anyopaque;
pub const GDExtensionInterfaceClassdbRegisterExtensionClass = ?*const fn (GDExtensionClassLibraryPtr, GDExtensionConstStringNamePtr, GDExtensionConstStringNamePtr, [*c]const GDExtensionClassCreationInfo) callconv(.C) void;
pub const GDExtensionInterfaceClassdbRegisterExtensionClass2 = ?*const fn (GDExtensionClassLibraryPtr, GDExtensionConstStringNamePtr, GDExtensionConstStringNamePtr, [*c]const GDExtensionClassCreationInfo2) callconv(.C) void;
pub const GDExtensionInterfaceClassdbRegisterExtensionClass3 = ?*const fn (GDExtensionClassLibraryPtr, GDExtensionConstStringNamePtr, GDExtensionConstStringNamePtr, [*c]const GDExtensionClassCreationInfo3) callconv(.C) void;
pub const GDExtensionInterfaceClassdbRegisterExtensionClassMethod = ?*const fn (GDExtensionClassLibraryPtr, GDExtensionConstStringNamePtr, [*c]const GDExtensionClassMethodInfo) callconv(.C) void;
pub const GDExtensionInterfaceClassdbRegisterExtensionClassVirtualMethod = ?*const fn (GDExtensionClassLibraryPtr, GDExtensionConstStringNamePtr, [*c]const GDExtensionClassVirtualMethodInfo) callconv(.C) void;
pub const GDExtensionInterfaceClassdbRegisterExtensionClassIntegerConstant = ?*const fn (GDExtensionClassLibraryPtr, GDExtensionConstStringNamePtr, GDExtensionConstStringNamePtr, GDExtensionConstStringNamePtr, GDExtensionInt, GDExtensionBool) callconv(.C) void;
pub const GDExtensionInterfaceClassdbRegisterExtensionClassProperty = ?*const fn (GDExtensionClassLibraryPtr, GDExtensionConstStringNamePtr, [*c]const GDExtensionPropertyInfo, GDExtensionConstStringNamePtr, GDExtensionConstStringNamePtr) callconv(.C) void;
pub const GDExtensionInterfaceClassdbRegisterExtensionClassPropertyIndexed = ?*const fn (GDExtensionClassLibraryPtr, GDExtensionConstStringNamePtr, [*c]const GDExtensionPropertyInfo, GDExtensionConstStringNamePtr, GDExtensionConstStringNamePtr, GDExtensionInt) callconv(.C) void;
pub const GDExtensionInterfaceClassdbRegisterExtensionClassPropertyGroup = ?*const fn (GDExtensionClassLibraryPtr, GDExtensionConstStringNamePtr, GDExtensionConstStringPtr, GDExtensionConstStringPtr) callconv(.C) void;
pub const GDExtensionInterfaceClassdbRegisterExtensionClassPropertySubgroup = ?*const fn (GDExtensionClassLibraryPtr, GDExtensionConstStringNamePtr, GDExtensionConstStringPtr, GDExtensionConstStringPtr) callconv(.C) void;
pub const GDExtensionInterfaceClassdbRegisterExtensionClassSignal = ?*const fn (GDExtensionClassLibraryPtr, GDExtensionConstStringNamePtr, GDExtensionConstStringNamePtr, [*c]const GDExtensionPropertyInfo, GDExtensionInt) callconv(.C) void;
pub const GDExtensionInterfaceClassdbUnregisterExtensionClass = ?*const fn (GDExtensionClassLibraryPtr, GDExtensionConstStringNamePtr) callconv(.C) void;
pub const GDExtensionInterfaceGetLibraryPath = ?*const fn (GDExtensionClassLibraryPtr, GDExtensionUninitializedStringPtr) callconv(.C) void;
pub const GDExtensionInterfaceEditorAddPlugin = ?*const fn (GDExtensionConstStringNamePtr) callconv(.C) void;
pub const GDExtensionInterfaceEditorRemovePlugin = ?*const fn (GDExtensionConstStringNamePtr) callconv(.C) void;
pub const GDExtensionsInterfaceEditorHelpLoadXmlFromUtf8Chars = ?*const fn ([*c]const u8) callconv(.C) void;
pub const GDExtensionsInterfaceEditorHelpLoadXmlFromUtf8CharsAndLen = ?*const fn ([*c]const u8, GDExtensionInt) callconv(.C) void;
pub const __llvm__ = @as(c_int, 1);
pub const __clang__ = @as(c_int, 1);
pub const __clang_major__ = @as(c_int, 18);
pub const __clang_minor__ = @as(c_int, 1);
pub const __clang_patchlevel__ = @as(c_int, 6);
pub const __clang_version__ = "18.1.6 (https://github.com/ziglang/zig-bootstrap 98bc6bf4fc4009888d33941daf6b600d20a42a56)";
pub const __GNUC__ = @as(c_int, 4);
pub const __GNUC_MINOR__ = @as(c_int, 2);
pub const __GNUC_PATCHLEVEL__ = @as(c_int, 1);
pub const __GXX_ABI_VERSION = @as(c_int, 1002);
pub const __ATOMIC_RELAXED = @as(c_int, 0);
pub const __ATOMIC_CONSUME = @as(c_int, 1);
pub const __ATOMIC_ACQUIRE = @as(c_int, 2);
pub const __ATOMIC_RELEASE = @as(c_int, 3);
pub const __ATOMIC_ACQ_REL = @as(c_int, 4);
pub const __ATOMIC_SEQ_CST = @as(c_int, 5);
pub const __MEMORY_SCOPE_SYSTEM = @as(c_int, 0);
pub const __MEMORY_SCOPE_DEVICE = @as(c_int, 1);
pub const __MEMORY_SCOPE_WRKGRP = @as(c_int, 2);
pub const __MEMORY_SCOPE_WVFRNT = @as(c_int, 3);
pub const __MEMORY_SCOPE_SINGLE = @as(c_int, 4);
pub const __OPENCL_MEMORY_SCOPE_WORK_ITEM = @as(c_int, 0);
pub const __OPENCL_MEMORY_SCOPE_WORK_GROUP = @as(c_int, 1);
pub const __OPENCL_MEMORY_SCOPE_DEVICE = @as(c_int, 2);
pub const __OPENCL_MEMORY_SCOPE_ALL_SVM_DEVICES = @as(c_int, 3);
pub const __OPENCL_MEMORY_SCOPE_SUB_GROUP = @as(c_int, 4);
pub const __FPCLASS_SNAN = @as(c_int, 0x0001);
pub const __FPCLASS_QNAN = @as(c_int, 0x0002);
pub const __FPCLASS_NEGINF = @as(c_int, 0x0004);
pub const __FPCLASS_NEGNORMAL = @as(c_int, 0x0008);
pub const __FPCLASS_NEGSUBNORMAL = @as(c_int, 0x0010);
pub const __FPCLASS_NEGZERO = @as(c_int, 0x0020);
pub const __FPCLASS_POSZERO = @as(c_int, 0x0040);
pub const __FPCLASS_POSSUBNORMAL = @as(c_int, 0x0080);
pub const __FPCLASS_POSNORMAL = @as(c_int, 0x0100);
pub const __FPCLASS_POSINF = @as(c_int, 0x0200);
pub const __PRAGMA_REDEFINE_EXTNAME = @as(c_int, 1);
pub const __VERSION__ = "Clang 18.1.6 (https://github.com/ziglang/zig-bootstrap 98bc6bf4fc4009888d33941daf6b600d20a42a56)";
pub const __OBJC_BOOL_IS_BOOL = @as(c_int, 0);
pub const __CONSTANT_CFSTRINGS__ = @as(c_int, 1);
pub const __clang_literal_encoding__ = "UTF-8";
pub const __clang_wide_literal_encoding__ = "UTF-32";
pub const __ORDER_LITTLE_ENDIAN__ = @as(c_int, 1234);
pub const __ORDER_BIG_ENDIAN__ = @as(c_int, 4321);
pub const __ORDER_PDP_ENDIAN__ = @as(c_int, 3412);
pub const __BYTE_ORDER__ = __ORDER_LITTLE_ENDIAN__;
pub const __LITTLE_ENDIAN__ = @as(c_int, 1);
pub const _LP64 = @as(c_int, 1);
pub const __LP64__ = @as(c_int, 1);
pub const __CHAR_BIT__ = @as(c_int, 8);
pub const __BOOL_WIDTH__ = @as(c_int, 8);
pub const __SHRT_WIDTH__ = @as(c_int, 16);
pub const __INT_WIDTH__ = @as(c_int, 32);
pub const __LONG_WIDTH__ = @as(c_int, 64);
pub const __LLONG_WIDTH__ = @as(c_int, 64);
pub const __BITINT_MAXWIDTH__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 8388608, .decimal);
pub const __SCHAR_MAX__ = @as(c_int, 127);
pub const __SHRT_MAX__ = @as(c_int, 32767);
pub const __INT_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __LONG_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const __LONG_LONG_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __WCHAR_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __WCHAR_WIDTH__ = @as(c_int, 32);
pub const __WINT_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __WINT_WIDTH__ = @as(c_int, 32);
pub const __INTMAX_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const __INTMAX_WIDTH__ = @as(c_int, 64);
pub const __SIZE_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const __SIZE_WIDTH__ = @as(c_int, 64);
pub const __UINTMAX_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const __UINTMAX_WIDTH__ = @as(c_int, 64);
pub const __PTRDIFF_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const __PTRDIFF_WIDTH__ = @as(c_int, 64);
pub const __INTPTR_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const __INTPTR_WIDTH__ = @as(c_int, 64);
pub const __UINTPTR_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const __UINTPTR_WIDTH__ = @as(c_int, 64);
pub const __SIZEOF_DOUBLE__ = @as(c_int, 8);
pub const __SIZEOF_FLOAT__ = @as(c_int, 4);
pub const __SIZEOF_INT__ = @as(c_int, 4);
pub const __SIZEOF_LONG__ = @as(c_int, 8);
pub const __SIZEOF_LONG_DOUBLE__ = @as(c_int, 16);
pub const __SIZEOF_LONG_LONG__ = @as(c_int, 8);
pub const __SIZEOF_POINTER__ = @as(c_int, 8);
pub const __SIZEOF_SHORT__ = @as(c_int, 2);
pub const __SIZEOF_PTRDIFF_T__ = @as(c_int, 8);
pub const __SIZEOF_SIZE_T__ = @as(c_int, 8);
pub const __SIZEOF_WCHAR_T__ = @as(c_int, 4);
pub const __SIZEOF_WINT_T__ = @as(c_int, 4);
pub const __SIZEOF_INT128__ = @as(c_int, 16);
pub const __INTMAX_TYPE__ = c_long;
pub const __INTMAX_FMTd__ = "ld";
pub const __INTMAX_FMTi__ = "li";
pub const __INTMAX_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `L`");
// (no file):95:9
pub const __UINTMAX_TYPE__ = c_ulong;
pub const __UINTMAX_FMTo__ = "lo";
pub const __UINTMAX_FMTu__ = "lu";
pub const __UINTMAX_FMTx__ = "lx";
pub const __UINTMAX_FMTX__ = "lX";
pub const __UINTMAX_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `UL`");
// (no file):101:9
pub const __PTRDIFF_TYPE__ = c_long;
pub const __PTRDIFF_FMTd__ = "ld";
pub const __PTRDIFF_FMTi__ = "li";
pub const __INTPTR_TYPE__ = c_long;
pub const __INTPTR_FMTd__ = "ld";
pub const __INTPTR_FMTi__ = "li";
pub const __SIZE_TYPE__ = c_ulong;
pub const __SIZE_FMTo__ = "lo";
pub const __SIZE_FMTu__ = "lu";
pub const __SIZE_FMTx__ = "lx";
pub const __SIZE_FMTX__ = "lX";
pub const __WCHAR_TYPE__ = c_int;
pub const __WINT_TYPE__ = c_uint;
pub const __SIG_ATOMIC_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __SIG_ATOMIC_WIDTH__ = @as(c_int, 32);
pub const __CHAR16_TYPE__ = c_ushort;
pub const __CHAR32_TYPE__ = c_uint;
pub const __UINTPTR_TYPE__ = c_ulong;
pub const __UINTPTR_FMTo__ = "lo";
pub const __UINTPTR_FMTu__ = "lu";
pub const __UINTPTR_FMTx__ = "lx";
pub const __UINTPTR_FMTX__ = "lX";
pub const __FLT16_DENORM_MIN__ = @as(f16, 5.9604644775390625e-8);
pub const __FLT16_HAS_DENORM__ = @as(c_int, 1);
pub const __FLT16_DIG__ = @as(c_int, 3);
pub const __FLT16_DECIMAL_DIG__ = @as(c_int, 5);
pub const __FLT16_EPSILON__ = @as(f16, 9.765625e-4);
pub const __FLT16_HAS_INFINITY__ = @as(c_int, 1);
pub const __FLT16_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __FLT16_MANT_DIG__ = @as(c_int, 11);
pub const __FLT16_MAX_10_EXP__ = @as(c_int, 4);
pub const __FLT16_MAX_EXP__ = @as(c_int, 16);
pub const __FLT16_MAX__ = @as(f16, 6.5504e+4);
pub const __FLT16_MIN_10_EXP__ = -@as(c_int, 4);
pub const __FLT16_MIN_EXP__ = -@as(c_int, 13);
pub const __FLT16_MIN__ = @as(f16, 6.103515625e-5);
pub const __FLT_DENORM_MIN__ = @as(f32, 1.40129846e-45);
pub const __FLT_HAS_DENORM__ = @as(c_int, 1);
pub const __FLT_DIG__ = @as(c_int, 6);
pub const __FLT_DECIMAL_DIG__ = @as(c_int, 9);
pub const __FLT_EPSILON__ = @as(f32, 1.19209290e-7);
pub const __FLT_HAS_INFINITY__ = @as(c_int, 1);
pub const __FLT_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __FLT_MANT_DIG__ = @as(c_int, 24);
pub const __FLT_MAX_10_EXP__ = @as(c_int, 38);
pub const __FLT_MAX_EXP__ = @as(c_int, 128);
pub const __FLT_MAX__ = @as(f32, 3.40282347e+38);
pub const __FLT_MIN_10_EXP__ = -@as(c_int, 37);
pub const __FLT_MIN_EXP__ = -@as(c_int, 125);
pub const __FLT_MIN__ = @as(f32, 1.17549435e-38);
pub const __DBL_DENORM_MIN__ = @as(f64, 4.9406564584124654e-324);
pub const __DBL_HAS_DENORM__ = @as(c_int, 1);
pub const __DBL_DIG__ = @as(c_int, 15);
pub const __DBL_DECIMAL_DIG__ = @as(c_int, 17);
pub const __DBL_EPSILON__ = @as(f64, 2.2204460492503131e-16);
pub const __DBL_HAS_INFINITY__ = @as(c_int, 1);
pub const __DBL_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __DBL_MANT_DIG__ = @as(c_int, 53);
pub const __DBL_MAX_10_EXP__ = @as(c_int, 308);
pub const __DBL_MAX_EXP__ = @as(c_int, 1024);
pub const __DBL_MAX__ = @as(f64, 1.7976931348623157e+308);
pub const __DBL_MIN_10_EXP__ = -@as(c_int, 307);
pub const __DBL_MIN_EXP__ = -@as(c_int, 1021);
pub const __DBL_MIN__ = @as(f64, 2.2250738585072014e-308);
pub const __LDBL_DENORM_MIN__ = @as(c_longdouble, 3.64519953188247460253e-4951);
pub const __LDBL_HAS_DENORM__ = @as(c_int, 1);
pub const __LDBL_DIG__ = @as(c_int, 18);
pub const __LDBL_DECIMAL_DIG__ = @as(c_int, 21);
pub const __LDBL_EPSILON__ = @as(c_longdouble, 1.08420217248550443401e-19);
pub const __LDBL_HAS_INFINITY__ = @as(c_int, 1);
pub const __LDBL_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __LDBL_MANT_DIG__ = @as(c_int, 64);
pub const __LDBL_MAX_10_EXP__ = @as(c_int, 4932);
pub const __LDBL_MAX_EXP__ = @as(c_int, 16384);
pub const __LDBL_MAX__ = @as(c_longdouble, 1.18973149535723176502e+4932);
pub const __LDBL_MIN_10_EXP__ = -@as(c_int, 4931);
pub const __LDBL_MIN_EXP__ = -@as(c_int, 16381);
pub const __LDBL_MIN__ = @as(c_longdouble, 3.36210314311209350626e-4932);
pub const __POINTER_WIDTH__ = @as(c_int, 64);
pub const __BIGGEST_ALIGNMENT__ = @as(c_int, 16);
pub const __WINT_UNSIGNED__ = @as(c_int, 1);
pub const __INT8_TYPE__ = i8;
pub const __INT8_FMTd__ = "hhd";
pub const __INT8_FMTi__ = "hhi";
pub const __INT8_C_SUFFIX__ = "";
pub const __INT16_TYPE__ = c_short;
pub const __INT16_FMTd__ = "hd";
pub const __INT16_FMTi__ = "hi";
pub const __INT16_C_SUFFIX__ = "";
pub const __INT32_TYPE__ = c_int;
pub const __INT32_FMTd__ = "d";
pub const __INT32_FMTi__ = "i";
pub const __INT32_C_SUFFIX__ = "";
pub const __INT64_TYPE__ = c_long;
pub const __INT64_FMTd__ = "ld";
pub const __INT64_FMTi__ = "li";
pub const __INT64_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `L`");
// (no file):198:9
pub const __UINT8_TYPE__ = u8;
pub const __UINT8_FMTo__ = "hho";
pub const __UINT8_FMTu__ = "hhu";
pub const __UINT8_FMTx__ = "hhx";
pub const __UINT8_FMTX__ = "hhX";
pub const __UINT8_C_SUFFIX__ = "";
pub const __UINT8_MAX__ = @as(c_int, 255);
pub const __INT8_MAX__ = @as(c_int, 127);
pub const __UINT16_TYPE__ = c_ushort;
pub const __UINT16_FMTo__ = "ho";
pub const __UINT16_FMTu__ = "hu";
pub const __UINT16_FMTx__ = "hx";
pub const __UINT16_FMTX__ = "hX";
pub const __UINT16_C_SUFFIX__ = "";
pub const __UINT16_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const __INT16_MAX__ = @as(c_int, 32767);
pub const __UINT32_TYPE__ = c_uint;
pub const __UINT32_FMTo__ = "o";
pub const __UINT32_FMTu__ = "u";
pub const __UINT32_FMTx__ = "x";
pub const __UINT32_FMTX__ = "X";
pub const __UINT32_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `U`");
// (no file):220:9
pub const __UINT32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __INT32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __UINT64_TYPE__ = c_ulong;
pub const __UINT64_FMTo__ = "lo";
pub const __UINT64_FMTu__ = "lu";
pub const __UINT64_FMTx__ = "lx";
pub const __UINT64_FMTX__ = "lX";
pub const __UINT64_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `UL`");
// (no file):228:9
pub const __UINT64_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const __INT64_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const __INT_LEAST8_TYPE__ = i8;
pub const __INT_LEAST8_MAX__ = @as(c_int, 127);
pub const __INT_LEAST8_WIDTH__ = @as(c_int, 8);
pub const __INT_LEAST8_FMTd__ = "hhd";
pub const __INT_LEAST8_FMTi__ = "hhi";
pub const __UINT_LEAST8_TYPE__ = u8;
pub const __UINT_LEAST8_MAX__ = @as(c_int, 255);
pub const __UINT_LEAST8_FMTo__ = "hho";
pub const __UINT_LEAST8_FMTu__ = "hhu";
pub const __UINT_LEAST8_FMTx__ = "hhx";
pub const __UINT_LEAST8_FMTX__ = "hhX";
pub const __INT_LEAST16_TYPE__ = c_short;
pub const __INT_LEAST16_MAX__ = @as(c_int, 32767);
pub const __INT_LEAST16_WIDTH__ = @as(c_int, 16);
pub const __INT_LEAST16_FMTd__ = "hd";
pub const __INT_LEAST16_FMTi__ = "hi";
pub const __UINT_LEAST16_TYPE__ = c_ushort;
pub const __UINT_LEAST16_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const __UINT_LEAST16_FMTo__ = "ho";
pub const __UINT_LEAST16_FMTu__ = "hu";
pub const __UINT_LEAST16_FMTx__ = "hx";
pub const __UINT_LEAST16_FMTX__ = "hX";
pub const __INT_LEAST32_TYPE__ = c_int;
pub const __INT_LEAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __INT_LEAST32_WIDTH__ = @as(c_int, 32);
pub const __INT_LEAST32_FMTd__ = "d";
pub const __INT_LEAST32_FMTi__ = "i";
pub const __UINT_LEAST32_TYPE__ = c_uint;
pub const __UINT_LEAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __UINT_LEAST32_FMTo__ = "o";
pub const __UINT_LEAST32_FMTu__ = "u";
pub const __UINT_LEAST32_FMTx__ = "x";
pub const __UINT_LEAST32_FMTX__ = "X";
pub const __INT_LEAST64_TYPE__ = c_long;
pub const __INT_LEAST64_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const __INT_LEAST64_WIDTH__ = @as(c_int, 64);
pub const __INT_LEAST64_FMTd__ = "ld";
pub const __INT_LEAST64_FMTi__ = "li";
pub const __UINT_LEAST64_TYPE__ = c_ulong;
pub const __UINT_LEAST64_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const __UINT_LEAST64_FMTo__ = "lo";
pub const __UINT_LEAST64_FMTu__ = "lu";
pub const __UINT_LEAST64_FMTx__ = "lx";
pub const __UINT_LEAST64_FMTX__ = "lX";
pub const __INT_FAST8_TYPE__ = i8;
pub const __INT_FAST8_MAX__ = @as(c_int, 127);
pub const __INT_FAST8_WIDTH__ = @as(c_int, 8);
pub const __INT_FAST8_FMTd__ = "hhd";
pub const __INT_FAST8_FMTi__ = "hhi";
pub const __UINT_FAST8_TYPE__ = u8;
pub const __UINT_FAST8_MAX__ = @as(c_int, 255);
pub const __UINT_FAST8_FMTo__ = "hho";
pub const __UINT_FAST8_FMTu__ = "hhu";
pub const __UINT_FAST8_FMTx__ = "hhx";
pub const __UINT_FAST8_FMTX__ = "hhX";
pub const __INT_FAST16_TYPE__ = c_short;
pub const __INT_FAST16_MAX__ = @as(c_int, 32767);
pub const __INT_FAST16_WIDTH__ = @as(c_int, 16);
pub const __INT_FAST16_FMTd__ = "hd";
pub const __INT_FAST16_FMTi__ = "hi";
pub const __UINT_FAST16_TYPE__ = c_ushort;
pub const __UINT_FAST16_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const __UINT_FAST16_FMTo__ = "ho";
pub const __UINT_FAST16_FMTu__ = "hu";
pub const __UINT_FAST16_FMTx__ = "hx";
pub const __UINT_FAST16_FMTX__ = "hX";
pub const __INT_FAST32_TYPE__ = c_int;
pub const __INT_FAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __INT_FAST32_WIDTH__ = @as(c_int, 32);
pub const __INT_FAST32_FMTd__ = "d";
pub const __INT_FAST32_FMTi__ = "i";
pub const __UINT_FAST32_TYPE__ = c_uint;
pub const __UINT_FAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __UINT_FAST32_FMTo__ = "o";
pub const __UINT_FAST32_FMTu__ = "u";
pub const __UINT_FAST32_FMTx__ = "x";
pub const __UINT_FAST32_FMTX__ = "X";
pub const __INT_FAST64_TYPE__ = c_long;
pub const __INT_FAST64_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const __INT_FAST64_WIDTH__ = @as(c_int, 64);
pub const __INT_FAST64_FMTd__ = "ld";
pub const __INT_FAST64_FMTi__ = "li";
pub const __UINT_FAST64_TYPE__ = c_ulong;
pub const __UINT_FAST64_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const __UINT_FAST64_FMTo__ = "lo";
pub const __UINT_FAST64_FMTu__ = "lu";
pub const __UINT_FAST64_FMTx__ = "lx";
pub const __UINT_FAST64_FMTX__ = "lX";
pub const __USER_LABEL_PREFIX__ = "";
pub const __FINITE_MATH_ONLY__ = @as(c_int, 0);
pub const __GNUC_STDC_INLINE__ = @as(c_int, 1);
pub const __GCC_ATOMIC_TEST_AND_SET_TRUEVAL = @as(c_int, 1);
pub const __CLANG_ATOMIC_BOOL_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_CHAR_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_CHAR16_T_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_CHAR32_T_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_WCHAR_T_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_SHORT_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_INT_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_LONG_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_LLONG_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_POINTER_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_BOOL_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_CHAR_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_CHAR16_T_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_CHAR32_T_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_WCHAR_T_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_SHORT_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_INT_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_LONG_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_LLONG_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_POINTER_LOCK_FREE = @as(c_int, 2);
pub const __NO_INLINE__ = @as(c_int, 1);
pub const __PIC__ = @as(c_int, 2);
pub const __pic__ = @as(c_int, 2);
pub const __PIE__ = @as(c_int, 2);
pub const __pie__ = @as(c_int, 2);
pub const __FLT_RADIX__ = @as(c_int, 2);
pub const __DECIMAL_DIG__ = __LDBL_DECIMAL_DIG__;
pub const __ELF__ = @as(c_int, 1);
pub const __GCC_ASM_FLAG_OUTPUTS__ = @as(c_int, 1);
pub const __code_model_small__ = @as(c_int, 1);
pub const __amd64__ = @as(c_int, 1);
pub const __amd64 = @as(c_int, 1);
pub const __x86_64 = @as(c_int, 1);
pub const __x86_64__ = @as(c_int, 1);
pub const __SEG_GS = @as(c_int, 1);
pub const __SEG_FS = @as(c_int, 1);
pub const __seg_gs = @compileError("unable to translate macro: undefined identifier `address_space`");
// (no file):359:9
pub const __seg_fs = @compileError("unable to translate macro: undefined identifier `address_space`");
// (no file):360:9
pub const __znver1 = @as(c_int, 1);
pub const __znver1__ = @as(c_int, 1);
pub const __tune_znver1__ = @as(c_int, 1);
pub const __REGISTER_PREFIX__ = "";
pub const __NO_MATH_INLINES = @as(c_int, 1);
pub const __AES__ = @as(c_int, 1);
pub const __PCLMUL__ = @as(c_int, 1);
pub const __LAHF_SAHF__ = @as(c_int, 1);
pub const __LZCNT__ = @as(c_int, 1);
pub const __RDRND__ = @as(c_int, 1);
pub const __FSGSBASE__ = @as(c_int, 1);
pub const __BMI__ = @as(c_int, 1);
pub const __BMI2__ = @as(c_int, 1);
pub const __POPCNT__ = @as(c_int, 1);
pub const __PRFCHW__ = @as(c_int, 1);
pub const __RDSEED__ = @as(c_int, 1);
pub const __ADX__ = @as(c_int, 1);
pub const __MWAITX__ = @as(c_int, 1);
pub const __MOVBE__ = @as(c_int, 1);
pub const __SSE4A__ = @as(c_int, 1);
pub const __FMA__ = @as(c_int, 1);
pub const __F16C__ = @as(c_int, 1);
pub const __SHA__ = @as(c_int, 1);
pub const __FXSR__ = @as(c_int, 1);
pub const __XSAVE__ = @as(c_int, 1);
pub const __XSAVEOPT__ = @as(c_int, 1);
pub const __XSAVEC__ = @as(c_int, 1);
pub const __XSAVES__ = @as(c_int, 1);
pub const __CLFLUSHOPT__ = @as(c_int, 1);
pub const __CLZERO__ = @as(c_int, 1);
pub const __CRC32__ = @as(c_int, 1);
pub const __AVX2__ = @as(c_int, 1);
pub const __AVX__ = @as(c_int, 1);
pub const __SSE4_2__ = @as(c_int, 1);
pub const __SSE4_1__ = @as(c_int, 1);
pub const __SSSE3__ = @as(c_int, 1);
pub const __SSE3__ = @as(c_int, 1);
pub const __SSE2__ = @as(c_int, 1);
pub const __SSE2_MATH__ = @as(c_int, 1);
pub const __SSE__ = @as(c_int, 1);
pub const __SSE_MATH__ = @as(c_int, 1);
pub const __MMX__ = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_1 = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2 = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4 = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_8 = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_16 = @as(c_int, 1);
pub const __SIZEOF_FLOAT128__ = @as(c_int, 16);
pub const unix = @as(c_int, 1);
pub const __unix = @as(c_int, 1);
pub const __unix__ = @as(c_int, 1);
pub const linux = @as(c_int, 1);
pub const __linux = @as(c_int, 1);
pub const __linux__ = @as(c_int, 1);
pub const __gnu_linux__ = @as(c_int, 1);
pub const __FLOAT128__ = @as(c_int, 1);
pub const __STDC__ = @as(c_int, 1);
pub const __STDC_HOSTED__ = @as(c_int, 1);
pub const __STDC_VERSION__ = @as(c_long, 201710);
pub const __STDC_UTF_16__ = @as(c_int, 1);
pub const __STDC_UTF_32__ = @as(c_int, 1);
pub const _DEBUG = @as(c_int, 1);
pub const __GCC_HAVE_DWARF2_CFI_ASM = @as(c_int, 1);
pub const GDEXTENSION_INTERFACE_H = "";
pub const __STDDEF_H = "";
pub const __need_ptrdiff_t = "";
pub const __need_size_t = "";
pub const __need_wchar_t = "";
pub const __need_NULL = "";
pub const __need_max_align_t = "";
pub const __need_offsetof = "";
pub const _PTRDIFF_T = "";
pub const _SIZE_T = "";
pub const _WCHAR_T = "";
pub const NULL = @import("std").zig.c_translation.cast(?*anyopaque, @as(c_int, 0));
pub const __CLANG_MAX_ALIGN_T_DEFINED = "";
pub const offsetof = @compileError("unable to translate C expr: unexpected token 'an identifier'");
// /home/frog/programs/zig/lib/include/__stddef_offsetof.h:16:9
pub const __CLANG_STDINT_H = "";
pub const __int_least64_t = i64;
pub const __uint_least64_t = u64;
pub const __int_least32_t = i64;
pub const __uint_least32_t = u64;
pub const __int_least16_t = i64;
pub const __uint_least16_t = u64;
pub const __int_least8_t = i64;
pub const __uint_least8_t = u64;
pub const __uint32_t_defined = "";
pub const __int8_t_defined = "";
pub const __stdint_join3 = @compileError("unable to translate C expr: unexpected token '##'");
// /home/frog/programs/zig/lib/include/stdint.h:287:9
pub const __intptr_t_defined = "";
pub const _INTPTR_T = "";
pub const _UINTPTR_T = "";
pub const __int_c_join = @compileError("unable to translate C expr: unexpected token '##'");
// /home/frog/programs/zig/lib/include/stdint.h:324:9
pub inline fn __int_c(v: anytype, suffix: anytype) @TypeOf(__int_c_join(v, suffix)) {
    _ = &v;
    _ = &suffix;
    return __int_c_join(v, suffix);
}
pub const __uint_c = @compileError("unable to translate macro: undefined identifier `U`");
// /home/frog/programs/zig/lib/include/stdint.h:326:9
pub const __int64_c_suffix = __INT64_C_SUFFIX__;
pub const __int32_c_suffix = __INT64_C_SUFFIX__;
pub const __int16_c_suffix = __INT64_C_SUFFIX__;
pub const __int8_c_suffix = __INT64_C_SUFFIX__;
pub inline fn INT64_C(v: anytype) @TypeOf(__int_c(v, __int64_c_suffix)) {
    _ = &v;
    return __int_c(v, __int64_c_suffix);
}
pub inline fn UINT64_C(v: anytype) @TypeOf(__uint_c(v, __int64_c_suffix)) {
    _ = &v;
    return __uint_c(v, __int64_c_suffix);
}
pub inline fn INT32_C(v: anytype) @TypeOf(__int_c(v, __int32_c_suffix)) {
    _ = &v;
    return __int_c(v, __int32_c_suffix);
}
pub inline fn UINT32_C(v: anytype) @TypeOf(__uint_c(v, __int32_c_suffix)) {
    _ = &v;
    return __uint_c(v, __int32_c_suffix);
}
pub inline fn INT16_C(v: anytype) @TypeOf(__int_c(v, __int16_c_suffix)) {
    _ = &v;
    return __int_c(v, __int16_c_suffix);
}
pub inline fn UINT16_C(v: anytype) @TypeOf(__uint_c(v, __int16_c_suffix)) {
    _ = &v;
    return __uint_c(v, __int16_c_suffix);
}
pub inline fn INT8_C(v: anytype) @TypeOf(__int_c(v, __int8_c_suffix)) {
    _ = &v;
    return __int_c(v, __int8_c_suffix);
}
pub inline fn UINT8_C(v: anytype) @TypeOf(__uint_c(v, __int8_c_suffix)) {
    _ = &v;
    return __uint_c(v, __int8_c_suffix);
}
pub const INT64_MAX = INT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 9223372036854775807, .decimal));
pub const INT64_MIN = -INT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 9223372036854775807, .decimal)) - @as(c_int, 1);
pub const UINT64_MAX = UINT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 18446744073709551615, .decimal));
pub const __INT_LEAST64_MIN = INT64_MIN;
pub const __INT_LEAST64_MAX = INT64_MAX;
pub const __UINT_LEAST64_MAX = UINT64_MAX;
pub const __INT_LEAST32_MIN = INT64_MIN;
pub const __INT_LEAST32_MAX = INT64_MAX;
pub const __UINT_LEAST32_MAX = UINT64_MAX;
pub const __INT_LEAST16_MIN = INT64_MIN;
pub const __INT_LEAST16_MAX = INT64_MAX;
pub const __UINT_LEAST16_MAX = UINT64_MAX;
pub const __INT_LEAST8_MIN = INT64_MIN;
pub const __INT_LEAST8_MAX = INT64_MAX;
pub const __UINT_LEAST8_MAX = UINT64_MAX;
pub const INT_LEAST64_MIN = __INT_LEAST64_MIN;
pub const INT_LEAST64_MAX = __INT_LEAST64_MAX;
pub const UINT_LEAST64_MAX = __UINT_LEAST64_MAX;
pub const INT_FAST64_MIN = __INT_LEAST64_MIN;
pub const INT_FAST64_MAX = __INT_LEAST64_MAX;
pub const UINT_FAST64_MAX = __UINT_LEAST64_MAX;
pub const INT32_MAX = INT32_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal));
pub const INT32_MIN = -INT32_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal)) - @as(c_int, 1);
pub const UINT32_MAX = UINT32_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 4294967295, .decimal));
pub const INT_LEAST32_MIN = __INT_LEAST32_MIN;
pub const INT_LEAST32_MAX = __INT_LEAST32_MAX;
pub const UINT_LEAST32_MAX = __UINT_LEAST32_MAX;
pub const INT_FAST32_MIN = __INT_LEAST32_MIN;
pub const INT_FAST32_MAX = __INT_LEAST32_MAX;
pub const UINT_FAST32_MAX = __UINT_LEAST32_MAX;
pub const INT16_MAX = INT16_C(@as(c_int, 32767));
pub const INT16_MIN = -INT16_C(@as(c_int, 32767)) - @as(c_int, 1);
pub const UINT16_MAX = UINT16_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal));
pub const INT_LEAST16_MIN = __INT_LEAST16_MIN;
pub const INT_LEAST16_MAX = __INT_LEAST16_MAX;
pub const UINT_LEAST16_MAX = __UINT_LEAST16_MAX;
pub const INT_FAST16_MIN = __INT_LEAST16_MIN;
pub const INT_FAST16_MAX = __INT_LEAST16_MAX;
pub const UINT_FAST16_MAX = __UINT_LEAST16_MAX;
pub const INT8_MAX = INT8_C(@as(c_int, 127));
pub const INT8_MIN = -INT8_C(@as(c_int, 127)) - @as(c_int, 1);
pub const UINT8_MAX = UINT8_C(@as(c_int, 255));
pub const INT_LEAST8_MIN = __INT_LEAST8_MIN;
pub const INT_LEAST8_MAX = __INT_LEAST8_MAX;
pub const UINT_LEAST8_MAX = __UINT_LEAST8_MAX;
pub const INT_FAST8_MIN = __INT_LEAST8_MIN;
pub const INT_FAST8_MAX = __INT_LEAST8_MAX;
pub const UINT_FAST8_MAX = __UINT_LEAST8_MAX;
pub const __INTN_MIN = @compileError("unable to translate macro: undefined identifier `INT`");
// /home/frog/programs/zig/lib/include/stdint.h:871:10
pub const __INTN_MAX = @compileError("unable to translate macro: undefined identifier `INT`");
// /home/frog/programs/zig/lib/include/stdint.h:872:10
pub const __UINTN_MAX = @compileError("unable to translate macro: undefined identifier `UINT`");
// /home/frog/programs/zig/lib/include/stdint.h:873:9
pub const __INTN_C = @compileError("unable to translate macro: undefined identifier `INT`");
// /home/frog/programs/zig/lib/include/stdint.h:874:10
pub const __UINTN_C = @compileError("unable to translate macro: undefined identifier `UINT`");
// /home/frog/programs/zig/lib/include/stdint.h:875:9
pub const INTPTR_MIN = -__INTPTR_MAX__ - @as(c_int, 1);
pub const INTPTR_MAX = __INTPTR_MAX__;
pub const UINTPTR_MAX = __UINTPTR_MAX__;
pub const PTRDIFF_MIN = -__PTRDIFF_MAX__ - @as(c_int, 1);
pub const PTRDIFF_MAX = __PTRDIFF_MAX__;
pub const SIZE_MAX = __SIZE_MAX__;
pub const INTMAX_MIN = -__INTMAX_MAX__ - @as(c_int, 1);
pub const INTMAX_MAX = __INTMAX_MAX__;
pub const UINTMAX_MAX = __UINTMAX_MAX__;
pub const SIG_ATOMIC_MIN = __INTN_MIN(__SIG_ATOMIC_WIDTH__);
pub const SIG_ATOMIC_MAX = __INTN_MAX(__SIG_ATOMIC_WIDTH__);
pub const WINT_MIN = __UINTN_C(__WINT_WIDTH__, @as(c_int, 0));
pub const WINT_MAX = __UINTN_MAX(__WINT_WIDTH__);
pub const WCHAR_MAX = __WCHAR_MAX__;
pub const WCHAR_MIN = __INTN_MIN(__WCHAR_WIDTH__);
pub inline fn INTMAX_C(v: anytype) @TypeOf(__int_c(v, __INTMAX_C_SUFFIX__)) {
    _ = &v;
    return __int_c(v, __INTMAX_C_SUFFIX__);
}
pub inline fn UINTMAX_C(v: anytype) @TypeOf(__int_c(v, __UINTMAX_C_SUFFIX__)) {
    _ = &v;
    return __int_c(v, __UINTMAX_C_SUFFIX__);
}
